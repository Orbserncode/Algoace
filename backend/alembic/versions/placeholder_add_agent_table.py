"""add_agent_table

Revision ID: auto_generated_placeholder
Revises: 
Create Date: YYYY-MM-DD HH:MM:SS.MS

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel # Add this line


# revision identifiers, used by Alembic.
revision: str = 'auto_generated_placeholder' # Will be replaced by Alembic
down_revision: Union[str, None] = None # Should be the ID of the previous migration if any
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('agent',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sa.Enum('STRATEGY_CODING', 'EXECUTION', 'DATA', 'ANALYSIS', name='agenttypeenum'), nullable=False),
    sa.Column('status', sa.Enum('RUNNING', 'IDLE', 'ERROR', 'STOPPED', name='agentstatusenum'), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tasksCompleted', sa.Integer(), nullable=False),
    sa.Column('errors', sa.Integer(), nullable=False),
    sa.Column('isDefault', sa.Boolean(), nullable=False),
    sa.Column('config', sa.JSON(), nullable=True), # Adjusted from nullable=False
    sa.Column('associatedStrategyIds', sa.JSON(), nullable=True), # Adjusted from nullable=False
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_agent_name'), 'agent', ['name'], unique=True) # Ensure agent names are unique
    # If you have other tables already, ensure this migration script correctly
    # sequences after them or handles their existence.
    # For a fresh setup, this is fine.
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_agent_name'), table_name='agent')
    op.drop_table('agent')
    # Drop enums if they were created explicitly by your SQL backend
    # For SQLite, enums are usually handled as CHECK constraints,
    # which are part of the table definition and dropped with the table.
    # For PostgreSQL, you might need:
    # op.execute("DROP TYPE agenttypeenum;")
    # op.execute("DROP TYPE agentstatusenum;")
    # ### end Alembic commands ###
