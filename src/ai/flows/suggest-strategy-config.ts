// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for suggesting optimal configuration options for a trading strategy.
 *
 * The flow takes into account market conditions, risk tolerance, and historical performance data to provide potentially profitable strategies.
 *
 * @module ai/flows/suggest-strategy-config
 *
 * @interface SuggestStrategyConfigInput - The input type for the suggestStrategyConfig function.
 * @interface SuggestStrategyConfigOutput - The output type for the suggestStrategyConfig function.
 * @function suggestStrategyConfig - A function that triggers the suggestStrategyConfigFlow and returns the suggested configurations.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const SuggestStrategyConfigInputSchema = z.object({
  marketConditions: z
    .string()
    .describe('The current market conditions (e.g., bullish, bearish, volatile).'),
  riskTolerance:
    z.enum(['low', 'medium', 'high']).describe('The user’s risk tolerance level.'),
  historicalPerformanceData: z
    .string()
    .describe(
      'Historical performance data of different trading strategies as a JSON string.'
    ),
});

export type SuggestStrategyConfigInput = z.infer<typeof SuggestStrategyConfigInputSchema>;

const SuggestStrategyConfigOutputSchema = z.object({
  strategyName: z.string().describe('The name of the suggested trading strategy.'),
  configurationOptions: z
    .record(z.any())
    .describe('A JSON object containing the optimal configuration options for the strategy.'),
  expectedReturn: z
    .number()
    .describe('The expected return of the suggested strategy, expressed as a percentage.'),
  riskLevel: z.string().describe('The risk level associated with the suggested strategy.'),
});

export type SuggestStrategyConfigOutput = z.infer<typeof SuggestStrategyConfigOutputSchema>;

export async function suggestStrategyConfig(
  input: SuggestStrategyConfigInput
): Promise<SuggestStrategyConfigOutput> {
  return suggestStrategyConfigFlow(input);
}

const suggestStrategyConfigPrompt = ai.definePrompt({
  name: 'suggestStrategyConfigPrompt',
  input: {
    schema: z.object({
      marketConditions: z
        .string()
        .describe('The current market conditions (e.g., bullish, bearish, volatile).'),
      riskTolerance:
        z.enum(['low', 'medium', 'high']).describe('The user’s risk tolerance level.'),
      historicalPerformanceData: z
        .string()
        .describe(
          'Historical performance data of different trading strategies as a JSON string.'
        ),
    }),
  },
  output: {
    schema: z.object({
      strategyName: z.string().describe('The name of the suggested trading strategy.'),
      configurationOptions: z
        .record(z.any())
        .describe('A JSON object containing the optimal configuration options for the strategy.'),
      expectedReturn: z
        .number()
        .describe('The expected return of the suggested strategy, expressed as a percentage.'),
      riskLevel: z.string().describe('The risk level associated with the suggested strategy.'),
    }),
  },
  prompt: `You are an expert in financial trading strategies.

  Based on the current market conditions: {{{marketConditions}}}, the user's risk tolerance: {{{riskTolerance}}}, and the following historical performance data: {{{historicalPerformanceData}}}, suggest an optimal trading strategy with specific configuration options.

  Return the strategy name, configuration options (as a JSON object), expected return (as a percentage), and risk level. The configuration options should be optimized to maximize return while considering the risk tolerance specified by the user.

  Make sure the configurationOptions are a valid JSON object.`,
});

const suggestStrategyConfigFlow = ai.defineFlow<
  typeof SuggestStrategyConfigInputSchema,
  typeof SuggestStrategyConfigOutputSchema
>(
  {
    name: 'suggestStrategyConfigFlow',
    inputSchema: SuggestStrategyConfigInputSchema,
    outputSchema: SuggestStrategyConfigOutputSchema,
  },
  async input => {
    const {output} = await suggestStrategyConfigPrompt(input);
    return output!;
  }
);
