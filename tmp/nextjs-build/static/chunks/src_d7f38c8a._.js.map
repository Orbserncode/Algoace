{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/calendar.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n"],"names":[],"mappings":";;;;AAGA;AAAA;AACA;AAEA;AACA;AAPA;;;;;;AAWA,SAAS,SAAS,EAChB,SAAS,EACT,UAAU,EACV,kBAAkB,IAAI,EACtB,GAAG,OACW;IACd,qBACE,6LAAC,iKAAA,CAAA,YAAS;QACR,iBAAiB;QACjB,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,OAAO;QACrB,YAAY;YACV,QAAQ;YACR,OAAO;YACP,SAAS;YACT,eAAe;YACf,KAAK;YACL,YAAY,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACX,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD,EAAE;gBAAE,SAAS;YAAU,IACpC;YAEF,qBAAqB;YACrB,iBAAiB;YACjB,OAAO;YACP,UAAU;YACV,WACE;YACF,KAAK;YACL,MAAM;YACN,KAAK,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACJ,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD,EAAE;gBAAE,SAAS;YAAQ,IAClC;YAEF,eAAe;YACf,cACE;YACF,WAAW;YACX,aACE;YACF,cAAc;YACd,kBACE;YACF,YAAY;YACZ,GAAG,UAAU;QACf;QACA,YAAY;YACV,UAAU,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,iBAChC,6LAAC,uNAAA,CAAA,cAAW;oBAAC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,WAAW;oBAAa,GAAG,KAAK;;;;;;YAE7D,WAAW,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,iBACjC,6LAAC,yNAAA,CAAA,eAAY;oBAAC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,WAAW;oBAAa,GAAG,KAAK;;;;;;QAEhE;QACC,GAAG,KAAK;;;;;;AAGf;KAvDS;AAwDT,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/popover.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,UAAU,sKAAA,CAAA,OAAqB;AAErC,MAAM,iBAAiB,sKAAA,CAAA,UAAwB;AAE/C,MAAM,+BAAiB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,QAAQ,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC5D,6LAAC,sKAAA,CAAA,SAAuB;kBACtB,cAAA,6LAAC,sKAAA,CAAA,UAAwB;YACvB,KAAK;YACL,OAAO;YACP,YAAY;YACZ,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,8aACA;YAED,GAAG,KAAK;;;;;;;;;;;;AAIf,eAAe,WAAW,GAAG,sKAAA,CAAA,UAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,qKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,qKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,qKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,qKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;KAVP;AAaN,cAAc,WAAW,GAAG,qKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,6LAAC;;0BACC,6LAAC;;;;;0BACD,6LAAC,qKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,6LAAC,qKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,6LAAC,+LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,6LAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,qKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,qKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,kBAAkB,WAAW,GAAG,qKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 610, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,6LAAC,6KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,6LAAC,6KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,6LAAC;;;;;0BACD,6LAAC,6KAAA,CAAA,SAA0B;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,6KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,6LAAC,6KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,6KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;MAjB7C;AAoBN,UAAU,WAAW,GAAG,6KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 687, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 726, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 944, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/ai/flows/suggest-strategy-config.ts"],"sourcesContent":["// This is an autogenerated file from Firebase Studio.\n\n'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for suggesting optimal configuration options for a trading strategy.\n *\n * The flow takes into account market conditions, risk tolerance, and historical performance data to provide potentially profitable strategies.\n *\n * @module ai/flows/suggest-strategy-config\n *\n * @interface SuggestStrategyConfigInput - The input type for the suggestStrategyConfig function.\n * @interface SuggestStrategyConfigOutput - The output type for the suggestStrategyConfig function.\n * @function suggestStrategyConfig - A function that triggers the suggestStrategyConfigFlow and returns the suggested configurations.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst SuggestStrategyConfigInputSchema = z.object({\n  marketConditions: z\n    .string()\n    .describe('The current market conditions (e.g., bullish, bearish, volatile).'),\n  riskTolerance:\n    z.enum(['low', 'medium', 'high']).describe('The user’s risk tolerance level.'),\n  historicalPerformanceData: z\n    .string()\n    .describe(\n      'Historical performance data of different trading strategies as a JSON string.'\n    ),\n});\n\nexport type SuggestStrategyConfigInput = z.infer<typeof SuggestStrategyConfigInputSchema>;\n\nconst SuggestStrategyConfigOutputSchema = z.object({\n  strategyName: z.string().describe('The name of the suggested trading strategy.'),\n  configurationOptions: z\n    .record(z.any())\n    .describe('A JSON object containing the optimal configuration options for the strategy.'),\n  expectedReturn: z\n    .number()\n    .describe('The expected return of the suggested strategy, expressed as a percentage.'),\n  riskLevel: z.string().describe('The risk level associated with the suggested strategy.'),\n});\n\nexport type SuggestStrategyConfigOutput = z.infer<typeof SuggestStrategyConfigOutputSchema>;\n\nexport async function suggestStrategyConfig(\n  input: SuggestStrategyConfigInput\n): Promise<SuggestStrategyConfigOutput> {\n  return suggestStrategyConfigFlow(input);\n}\n\nconst suggestStrategyConfigPrompt = ai.definePrompt({\n  name: 'suggestStrategyConfigPrompt',\n  input: {\n    schema: z.object({\n      marketConditions: z\n        .string()\n        .describe('The current market conditions (e.g., bullish, bearish, volatile).'),\n      riskTolerance:\n        z.enum(['low', 'medium', 'high']).describe('The user’s risk tolerance level.'),\n      historicalPerformanceData: z\n        .string()\n        .describe(\n          'Historical performance data of different trading strategies as a JSON string.'\n        ),\n    }),\n  },\n  output: {\n    schema: z.object({\n      strategyName: z.string().describe('The name of the suggested trading strategy.'),\n      configurationOptions: z\n        .record(z.any())\n        .describe('A JSON object containing the optimal configuration options for the strategy.'),\n      expectedReturn: z\n        .number()\n        .describe('The expected return of the suggested strategy, expressed as a percentage.'),\n      riskLevel: z.string().describe('The risk level associated with the suggested strategy.'),\n    }),\n  },\n  prompt: `You are an expert in financial trading strategies.\n\n  Based on the current market conditions: {{{marketConditions}}}, the user's risk tolerance: {{{riskTolerance}}}, and the following historical performance data: {{{historicalPerformanceData}}}, suggest an optimal trading strategy with specific configuration options.\n\n  Return the strategy name, configuration options (as a JSON object), expected return (as a percentage), and risk level. The configuration options should be optimized to maximize return while considering the risk tolerance specified by the user.\n\n  Make sure the configurationOptions are a valid JSON object.`,\n});\n\nconst suggestStrategyConfigFlow = ai.defineFlow<\n  typeof SuggestStrategyConfigInputSchema,\n  typeof SuggestStrategyConfigOutputSchema\n>(\n  {\n    name: 'suggestStrategyConfigFlow',\n    inputSchema: SuggestStrategyConfigInputSchema,\n    outputSchema: SuggestStrategyConfigOutputSchema,\n  },\n  async input => {\n    const {output} = await suggestStrategyConfigPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,sDAAsD;;;;;;IA+ChC","debugId":null}},
    {"offset": {"line": 957, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/services/strategies-service.ts"],"sourcesContent":["// src/services/strategies-service.ts\n\n/**\n * @fileOverview Service functions for fetching and managing trading strategies.\n * This service connects to the backend API to fetch and manage strategies.\n * The backend is built with FastAPI and uses SQLModel to interact with a SQLite database.\n */\nimport { SuggestStrategyConfigInput, SuggestStrategyConfigOutput } from '@/ai/flows/suggest-strategy-config'; // Ensure flow types are imported\nimport { suggestStrategyConfig as suggestStrategyConfigFlow } from '@/ai/flows/suggest-strategy-config'; // Import the actual flow function\n\nexport interface Strategy {\n  id: string;\n  name: string;\n  description: string;\n  status: 'Active' | 'Inactive' | 'Debugging' | 'Backtesting' | 'Archived'; // Added 'Archived'\n  pnl: number; // Consider fetching PnL dynamically or storing recent PnL\n  winRate: number; // Similarly, fetch/calculate win rate\n  // Add other relevant fields: parameters, associated agent ID, creation date, source (AI-gen/Uploaded), filename etc.\n  source?: 'AI-Generated' | 'Uploaded';\n  fileName?: string; // Store original filename if uploaded\n}\n\n// API base URL - use /api prefix to rely on Next.js rewrites\n\n// API base URL - use /api prefix to rely on Next.js rewrites\nconst API_BASE_URL = '/api';\n\n// Helper function to handle errors\nfunction handleError(error: any): never {\n  console.error('API Error:', error);\n  throw error;\n}\n\n// Helper function to convert backend strategy format to frontend format\nfunction convertBackendStrategy(backendStrategy: any): Strategy {\n  return {\n    id: `strat-${backendStrategy.id}`, // Convert numeric ID to string format with prefix\n    name: backendStrategy.name,\n    description: backendStrategy.description,\n    status: backendStrategy.status as Strategy['status'],\n    pnl: backendStrategy.pnl || 0,\n    winRate: backendStrategy.win_rate || 0,\n    source: backendStrategy.source as Strategy['source'],\n    fileName: backendStrategy.file_name\n  };\n}\n\n// Helper function to convert frontend strategy format to backend format\nfunction convertFrontendStrategy(frontendStrategy: Partial<Strategy>): any {\n  const backendStrategy: Record<string, any> = {\n    name: frontendStrategy.name,\n    description: frontendStrategy.description,\n    status: frontendStrategy.status,\n    source: frontendStrategy.source,\n    file_name: frontendStrategy.fileName,\n    pnl: frontendStrategy.pnl || 0,\n    win_rate: frontendStrategy.winRate || 0\n  };\n\n  // If ID is provided, extract the numeric part\n  if (frontendStrategy.id) {\n    const idMatch = frontendStrategy.id.match(/strat-(\\d+)/);\n    if (idMatch && idMatch[1]) {\n      backendStrategy.id = parseInt(idMatch[1], 10);\n    }\n  }\n\n  return backendStrategy;\n}\n\n\n/**\n * Fetches all strategies from the backend.\n * @param includeArchived Whether to include archived strategies. Defaults to false.\n * @returns A promise that resolves to an array of Strategy objects.\n */\nexport async function getStrategies(includeArchived: boolean = false): Promise<Strategy[]> {\n  console.log(`Fetching strategies (includeArchived: ${includeArchived})...`);\n  \n  try {\n    // Fetch strategies from the file-based API\n    const response = await fetch(`${API_BASE_URL}/file-strategies?include_archived=${includeArchived}`);\n    \n    if (!response.ok) {\n      console.error(`Error fetching strategies: ${response.statusText}`);\n      // Return empty array instead of throwing error\n      return [];\n    }\n    \n    const backendStrategies = await response.json();\n    \n    // Handle empty response\n    if (!backendStrategies || !Array.isArray(backendStrategies)) {\n      console.warn(\"Received invalid strategies data from backend\");\n      return [];\n    }\n    \n    // Convert backend format to frontend format\n    const strategies = backendStrategies.map((backendStrategy: any) => {\n      return {\n        id: backendStrategy.id || `strat-unknown-${Math.random().toString(36).substring(2, 9)}`, // Fallback ID if missing\n        name: backendStrategy.name || \"Unnamed Strategy\",\n        description: backendStrategy.description || \"No description available\",\n        status: (backendStrategy.status as Strategy['status']) || \"Active\",\n        pnl: backendStrategy.pnl || 0,\n        winRate: backendStrategy.win_rate || 0,\n        source: (backendStrategy.source as Strategy['source']) || \"Uploaded\",\n        fileName: backendStrategy.file_name || \"\"\n      };\n    });\n    \n    console.log(\"Fetched strategies:\", strategies.length);\n    return strategies;\n  } catch (error) {\n    console.error(\"Failed to fetch strategies:\", error);\n    // Return empty array instead of throwing error\n    return [];\n  }\n}\n\n/**\n * Fetches a single strategy by ID.\n * @param strategyId The ID of the strategy to fetch.\n * @returns A promise that resolves to the Strategy object or null if not found.\n */\nexport async function getStrategyById(strategyId: string): Promise<Strategy | null> {\n  console.log(`Fetching strategy by ID: ${strategyId}`);\n  \n  try {\n    // Fetch strategy from the file-based API\n    const response = await fetch(`${API_BASE_URL}/file-strategies/${strategyId}`);\n    \n    if (!response.ok) {\n      if (response.status === 404) {\n        console.log(`Strategy ${strategyId} not found.`);\n        return null;\n      }\n      throw new Error(`Error fetching strategy: ${response.statusText}`);\n    }\n    \n    const backendStrategy = await response.json();\n    \n    // Convert backend format to frontend format\n    const strategy: Strategy = {\n      id: backendStrategy.id,\n      name: backendStrategy.name,\n      description: backendStrategy.description,\n      status: backendStrategy.status as Strategy['status'],\n      pnl: backendStrategy.pnl || 0,\n      winRate: backendStrategy.win_rate || 0,\n      source: backendStrategy.source as Strategy['source'],\n      fileName: backendStrategy.file_name\n    };\n    \n    console.log(`Found strategy: ${strategy.name}`);\n    return strategy;\n  } catch (error) {\n    console.error(`Failed to fetch strategy ${strategyId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Fetches the code content for a given strategy ID.\n * In a real system, this would involve fetching the file content from storage\n * based on the strategy's fileName or database record.\n * @param strategyId The ID of the strategy.\n * @returns A promise resolving to the code string, or null if not found/applicable.\n */\nexport async function getStrategyCode(strategyId: string): Promise<string | null> {\n  console.log(`Fetching code for strategy ID: ${strategyId}`);\n  \n  try {\n    // Fetch strategy code from the file-based API\n    const response = await fetch(`${API_BASE_URL}/file-strategies/${strategyId}/code`);\n    \n    if (!response.ok) {\n      if (response.status === 404) {\n        console.log(`Code for strategy ${strategyId} not found.`);\n        return null;\n      }\n      throw new Error(`Error fetching strategy code: ${response.statusText}`);\n    }\n    \n    const result = await response.json();\n    return result.code;\n  } catch (error) {\n    console.error(`Failed to fetch code for strategy ${strategyId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Saves code for a strategy.\n * @param strategyId The ID of the strategy.\n * @param code The code to save.\n * @returns A promise that resolves to true if successful.\n */\nexport async function saveStrategyCode(strategyId: string, code: string): Promise<boolean> {\n  console.log(`Saving code for strategy ID: ${strategyId}`);\n  \n  try {\n    // Extract the numeric ID from the string ID\n    const idMatch = strategyId.match(/strat-(\\d+)/);\n    if (!idMatch || !idMatch[1]) {\n      console.error(`Invalid strategy ID format: ${strategyId}`);\n      return false;\n    }\n    \n    const numericId = idMatch[1];\n    \n    // Save strategy code to the API\n    const response = await fetch(`${API_BASE_URL}/strategies/${numericId}/code`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ code }),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error saving strategy code: ${response.statusText}`);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(`Failed to save code for strategy ${strategyId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Updates a strategy.\n * @param strategyId The ID of the strategy to update.\n * @param updates The updates to apply to the strategy.\n * @returns A promise that resolves to the updated Strategy object.\n */\nexport async function updateStrategy(strategyId: string, updates: Partial<Strategy>): Promise<Strategy> {\n  console.log(`Updating strategy ID: ${strategyId}`, updates);\n  \n  try {\n    // Extract the numeric ID from the string ID\n    const idMatch = strategyId.match(/strat-(\\d+)/);\n    if (!idMatch || !idMatch[1]) {\n      throw new Error(`Invalid strategy ID format: ${strategyId}`);\n    }\n    \n    const numericId = idMatch[1];\n    \n    // Convert frontend format to backend format\n    const backendUpdates = convertFrontendStrategy(updates);\n    \n    // Update strategy via the API\n    const response = await fetch(`${API_BASE_URL}/strategies/${numericId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(backendUpdates),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error updating strategy: ${response.statusText}`);\n    }\n    \n    const backendStrategy = await response.json();\n    \n    // Convert backend format to frontend format\n    return convertBackendStrategy(backendStrategy);\n  } catch (error) {\n    console.error(`Failed to update strategy ${strategyId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Archives a strategy.\n * @param strategyId The ID of the strategy to archive.\n * @returns A promise that resolves to the archived Strategy object.\n */\nexport async function archiveStrategy(strategyId: string): Promise<Strategy> {\n  console.log(`Archiving strategy ID: ${strategyId}`);\n  \n  // Use updateStrategy to set status to 'Archived'\n  return updateStrategy(strategyId, { status: 'Archived' });\n}\n\n/**\n * Permanently deletes a strategy.\n * @param strategyId The ID of the strategy to delete.\n * @returns A promise that resolves to true if successful.\n */\nexport async function deleteStrategyPermanently(strategyId: string): Promise<boolean> {\n  console.log(`Deleting strategy ID: ${strategyId}`);\n  \n  try {\n    // Extract the numeric ID from the string ID\n    const idMatch = strategyId.match(/strat-(\\d+)/);\n    if (!idMatch || !idMatch[1]) {\n      throw new Error(`Invalid strategy ID format: ${strategyId}`);\n    }\n    \n    const numericId = idMatch[1];\n    \n    // Delete strategy via the API\n    const response = await fetch(`${API_BASE_URL}/strategies/${numericId}`, {\n      method: 'DELETE',\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error deleting strategy: ${response.statusText}`);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(`Failed to delete strategy ${strategyId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Creates a new strategy with a file.\n * @param strategy The strategy data.\n * @param file The strategy file.\n * @returns A promise that resolves to the created Strategy object.\n */\nexport async function addStrategyWithFile(strategy: Partial<Strategy>, file?: File): Promise<Strategy> {\n  console.log(`Creating new strategy:`, strategy);\n  \n  try {\n    // Convert frontend format to backend format\n    const backendStrategy = convertFrontendStrategy(strategy);\n    \n    // Create a FormData object to send the file\n    const formData = new FormData();\n    formData.append('strategy_in', JSON.stringify(backendStrategy));\n    \n    if (file) {\n      formData.append('strategy_file', file);\n    }\n    \n    // Create strategy via the API\n    const response = await fetch(`${API_BASE_URL}/strategies/`, {\n      method: 'POST',\n      body: formData,\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error creating strategy: ${response.statusText}`);\n    }\n    \n    const createdStrategy = await response.json();\n    \n    // Convert backend format to frontend format\n    return convertBackendStrategy(createdStrategy);\n  } catch (error) {\n    console.error('Failed to create strategy:', error);\n    throw error;\n  }\n}\n\n/**\n * Suggests a strategy configuration based on user inputs.\n * @param input The input parameters for the suggestion.\n * @returns A promise that resolves to the suggested configuration.\n */\nexport async function suggestStrategyConfig(input: any): Promise<any> {\n  console.log(`Suggesting strategy config:`, input);\n  \n  try {\n    // Use the imported flow function\n    return await suggestStrategyConfigFlow(input);\n  } catch (error) {\n    console.error('Failed to suggest strategy config:', error);\n    throw error;\n  }\n}\n\n/**\n * Generates and tests a strategy from a suggestion.\n * @param suggestion The strategy suggestion.\n * @returns A promise that resolves to the created Strategy object.\n */\nexport async function generateAndTestStrategyFromSuggestion(suggestion: any): Promise<Strategy> {\n  console.log(`Generating strategy from suggestion:`, suggestion);\n  \n  try {\n    // Create a new strategy with the suggested configuration\n    const response = await fetch(`${API_BASE_URL}/strategies/generate`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(suggestion),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error generating strategy: ${response.statusText}`);\n    }\n    \n    const generatedStrategy = await response.json();\n    \n    // Convert backend format to frontend format\n    return convertBackendStrategy(generatedStrategy);\n  } catch (error) {\n    console.error('Failed to generate strategy:', error);\n    throw error;\n  }\n}\n\n/**\n * Schedules automated strategy generation.\n * @param scheduleType The type of schedule (startup, daily, weekly).\n * @param config The configuration for the generation.\n * @returns A promise that resolves to true if successful.\n */\nexport async function scheduleStrategyGeneration(scheduleType: string, config: any): Promise<boolean> {\n  console.log(`Scheduling strategy generation (${scheduleType}):`, config);\n  \n  try {\n    // Schedule strategy generation via the API\n    const response = await fetch(`${API_BASE_URL}/strategies/schedule-generation`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        schedule_type: scheduleType,\n        generation_config: config,\n      }),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error scheduling strategy generation: ${response.statusText}`);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Failed to schedule strategy generation:', error);\n    throw error;\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1284, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/services/broker-service.ts"],"sourcesContent":["// src/services/broker-service.ts\n\n/**\n * @fileOverview Service functions for interacting with the configured broker API.\n * Replace mock implementations with actual API calls to your broker (e.g., Lumibot's interface, Alpaca, etc.).\n */\n\n// Mock data for available assets - replace with actual broker API call\nconst mockAssets: string[] = [\n    'AAPL', 'MSFT', 'GOOGL', 'AMZN', 'NVDA', 'TSLA',\n    'BTC/USD', 'ETH/USD', 'SOL/USD', // Crypto examples\n    'EUR/USD', 'GBP/USD', 'USD/JPY', // Forex examples\n    'SPY', 'QQQ', // ETF examples\n];\n\n/**\n * Fetches the list of tradable assets available from the configured broker.\n * TODO: Replace with actual broker API call.\n * @returns A promise that resolves to an array of asset symbols (strings).\n */\nexport async function getAvailableAssets(brokerId?: string): Promise<string[]> {\n    console.log(`Fetching available assets from broker${brokerId ? ` (ID: ${brokerId})` : ''}...`);\n    \n    // Check if a broker is connected\n    if (!brokerId) {\n        // Get all configured brokers to check if any are available\n        try {\n            const { getConfiguredBrokers } = await import('./settings-service');\n            const brokers = await getConfiguredBrokers();\n            \n            if (!brokers || brokers.length === 0) {\n                console.log(\"No brokers configured. Cannot fetch assets.\");\n                return []; // Return empty array if no brokers are configured\n            }\n            \n            // If no specific broker ID was provided but brokers exist,\n            // we'll use the first one in the list for backward compatibility\n            brokerId = brokers[0].id;\n        } catch (error) {\n            console.error(\"Error checking for configured brokers:\", error);\n            return []; // Return empty array on error\n        }\n    }\n    \n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 400 + Math.random() * 200));\n\n    // --- Real implementation ---\n    // 1. Get broker credentials securely (e.g., from backend config).\n    // 2. Instantiate the broker API client (e.g., Lumibot Broker or other).\n    // 3. Call the appropriate method to list tradable assets/symbols.\n    // 4. Handle potential errors from the API call.\n    // -------------------------\n\n    console.log(\"Fetched available assets:\", mockAssets.length);\n    return [...mockAssets]; // Return a copy\n}\n\n/**\n * Checks if tick data is available for the specified asset and timeframe.\n * @param symbol The asset symbol to check\n * @param timeframe The timeframe to check\n * @returns A promise resolving to a boolean indicating if data is available\n */\nexport async function isTickDataAvailable(symbol: string, timeframe: string): Promise<boolean> {\n    console.log(`Checking if tick data is available for ${symbol} (${timeframe})...`);\n    \n    try {\n        // Make an API call to the backend to check if the dataset exists\n        const response = await fetch(`/api/datasets/check?symbol=${encodeURIComponent(symbol)}&timeframe=${encodeURIComponent(timeframe)}`);\n        \n        if (!response.ok) {\n            console.error(`Error checking dataset availability: ${response.statusText}`);\n            return false;\n        }\n        \n        const result = await response.json();\n        console.log(`Tick data for ${symbol} (${timeframe}) is ${result.available ? 'available' : 'not available'}`);\n        return result.available;\n    } catch (error) {\n        console.error(`Error checking tick data availability:`, error);\n        return false;\n    }\n}\n\n/**\n * Downloads tick data for the specified asset, timeframe, and date range.\n * @param symbol The asset symbol to download data for\n * @param timeframe The timeframe to download\n * @param startDate The start date for the data\n * @param endDate The end date for the data\n * @returns A promise resolving to a boolean indicating if the download was successful\n */\nexport async function downloadTickData(\n    symbol: string,\n    timeframe: string,\n    startDate: string,\n    endDate: string\n): Promise<boolean> {\n    console.log(`Downloading tick data for ${symbol} (${timeframe}) from ${startDate} to ${endDate}...`);\n    // Simulate API call delay - longer for download\n    await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1000));\n    \n    // Mock implementation - randomly succeed/fail\n    // In a real implementation, this would call the backend API to download data\n    const isSuccessful = Math.random() > 0.2; // 80% success rate\n    console.log(`Tick data download for ${symbol} (${timeframe}) ${isSuccessful ? 'succeeded' : 'failed'}`);\n    return isSuccessful;\n}\n\n/**\n * (Optional) Fetches account details from the broker.\n * TODO: Implement actual API call.\n * @returns A promise resolving to account information (e.g., balance, buying power).\n */\nexport async function getAccountDetails(): Promise<Record<string, any>> {\n    console.log(\"Fetching account details from broker...\");\n    await new Promise(resolve => setTimeout(resolve, 300));\n    // Call broker API for account info\n    return { balance: 50000, buyingPower: 100000, currency: 'USD' }; // Mock data\n}\n\n// Add other broker-related functions as needed (e.g., placeOrder, getPositions, etc.)\n"],"names":[],"mappings":"AAAA,iCAAiC;AAEjC;;;CAGC,GAED,uEAAuE;;;;;;;AACvE,MAAM,aAAuB;IACzB;IAAQ;IAAQ;IAAS;IAAQ;IAAQ;IACzC;IAAW;IAAW;IACtB;IAAW;IAAW;IACtB;IAAO;CACV;AAOM,eAAe,mBAAmB,QAAiB;IACtD,QAAQ,GAAG,CAAC,CAAC,qCAAqC,EAAE,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC;IAE7F,iCAAiC;IACjC,IAAI,CAAC,UAAU;QACX,2DAA2D;QAC3D,IAAI;YACA,MAAM,EAAE,oBAAoB,EAAE,GAAG;YACjC,MAAM,UAAU,MAAM;YAEtB,IAAI,CAAC,WAAW,QAAQ,MAAM,KAAK,GAAG;gBAClC,QAAQ,GAAG,CAAC;gBACZ,OAAO,EAAE,EAAE,kDAAkD;YACjE;YAEA,2DAA2D;YAC3D,iEAAiE;YACjE,WAAW,OAAO,CAAC,EAAE,CAAC,EAAE;QAC5B,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,0CAA0C;YACxD,OAAO,EAAE,EAAE,8BAA8B;QAC7C;IACJ;IAEA,0BAA0B;IAC1B,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS,MAAM,KAAK,MAAM,KAAK;IAEvE,8BAA8B;IAC9B,kEAAkE;IAClE,wEAAwE;IACxE,kEAAkE;IAClE,gDAAgD;IAChD,4BAA4B;IAE5B,QAAQ,GAAG,CAAC,6BAA6B,WAAW,MAAM;IAC1D,OAAO;WAAI;KAAW,EAAE,gBAAgB;AAC5C;AAQO,eAAe,oBAAoB,MAAc,EAAE,SAAiB;IACvE,QAAQ,GAAG,CAAC,CAAC,uCAAuC,EAAE,OAAO,EAAE,EAAE,UAAU,IAAI,CAAC;IAEhF,IAAI;QACA,iEAAiE;QACjE,MAAM,WAAW,MAAM,MAAM,CAAC,2BAA2B,EAAE,mBAAmB,QAAQ,WAAW,EAAE,mBAAmB,YAAY;QAElI,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,QAAQ,KAAK,CAAC,CAAC,qCAAqC,EAAE,SAAS,UAAU,EAAE;YAC3E,OAAO;QACX;QAEA,MAAM,SAAS,MAAM,SAAS,IAAI;QAClC,QAAQ,GAAG,CAAC,CAAC,cAAc,EAAE,OAAO,EAAE,EAAE,UAAU,KAAK,EAAE,OAAO,SAAS,GAAG,cAAc,iBAAiB;QAC3G,OAAO,OAAO,SAAS;IAC3B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,CAAC,sCAAsC,CAAC,EAAE;QACxD,OAAO;IACX;AACJ;AAUO,eAAe,iBAClB,MAAc,EACd,SAAiB,EACjB,SAAiB,EACjB,OAAe;IAEf,QAAQ,GAAG,CAAC,CAAC,0BAA0B,EAAE,OAAO,EAAE,EAAE,UAAU,OAAO,EAAE,UAAU,IAAI,EAAE,QAAQ,GAAG,CAAC;IACnG,gDAAgD;IAChD,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS,OAAO,KAAK,MAAM,KAAK;IAExE,8CAA8C;IAC9C,6EAA6E;IAC7E,MAAM,eAAe,KAAK,MAAM,KAAK,KAAK,mBAAmB;IAC7D,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,EAAE,eAAe,cAAc,UAAU;IACtG,OAAO;AACX;AAOO,eAAe;IAClB,QAAQ,GAAG,CAAC;IACZ,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IACjD,mCAAmC;IACnC,OAAO;QAAE,SAAS;QAAO,aAAa;QAAQ,UAAU;IAAM,GAAG,YAAY;AACjF,EAEA,sFAAsF","debugId":null}},
    {"offset": {"line": 1390, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/services/backtesting-service.ts"],"sourcesContent":["// src/services/backtesting-service.ts\n\n/**\n * @fileOverview Service functions for fetching and managing backtest results.\n * This service would interact with a backend system responsible for running\n * backtests (likely using Lumibot or a similar engine) and storing/retrieving the results.\n */\n\nimport type { PerformanceDataPoint } from './monitoring-service'; // Reuse type for equity curve\nimport { format } from \"date-fns\"; // Import date-fns for date formatting\n\n// API base URL - use /api prefix to rely on Next.js rewrites\nconst API_BASE_URL = '/api';\n\nexport interface BacktestSummaryMetrics {\n  netProfit: number;\n  profitFactor: number;\n  maxDrawdown: number; // As a decimal, e.g., 0.15 for 15%\n  winRate: number; // As a decimal, e.g., 0.65 for 65%\n  totalTrades: number;\n  avgTradePnl: number;\n  startDate?: string; // Optional: Date backtest started (YYYY-MM-DD)\n  endDate?: string; // Optional: Date backtest ended (YYYY-MM-DD)\n  sharpeRatio?: number; // Optional: Add more metrics as available\n  sortinoRatio?: number; // Optional\n  symbol?: string; // Asset/Symbol tested\n  timeframe?: string; // Timeframe used (e.g., '1d', '1h')\n  // Add any other relevant summary metrics from your backtesting engine\n}\n\nexport interface BacktestTrade {\n    entryTimestamp: string;\n    exitTimestamp: string;\n    symbol: string;\n    direction: 'Long' | 'Short';\n    entryPrice: number;\n    exitPrice: number;\n    quantity: number;\n    pnl: number;\n    // Add other trade details like fees, slippage etc.\n}\n\nexport interface BacktestResults {\n  strategyId: string;\n  timestamp: string; // When the backtest was run\n  summaryMetrics: BacktestSummaryMetrics;\n  equityCurve: PerformanceDataPoint[]; // Reuse the performance data structure\n  trades: BacktestTrade[];\n  // Could also include parameters used for the backtest\n  parameters?: Record<string, any>;\n  logOutput?: string; // Raw log output from the backtesting engine (optional)\n}\n\ntype JobStatus = 'PENDING' | 'RUNNING' | 'COMPLETED' | 'FAILED';\n\n\n/**\n * Fetches the latest backtest results for a given strategy.\n * In a real system, this might fetch based on strategyId AND the specific parameters used.\n * For this mock, it just returns the pre-defined result for the strategyId.\n * TODO: Replace with actual data fetching logic.\n * @param strategyId The ID of the strategy.\n * @returns A promise that resolves to the BacktestResults object.\n * @throws Throws an error if the backtest results are not found or if fetching fails.\n */\nexport async function getBacktestResults(strategyId: string): Promise<BacktestResults> {\n    console.log(`SERVICE: Fetching backtest results for strategy: ${strategyId}`);\n    \n    try {\n        const response = await fetch(`${API_BASE_URL}/backtesting/results/${strategyId}`);\n        \n        if (!response.ok) {\n            if (response.status === 404) {\n                throw new Error(`No backtest results available for strategy \"${strategyId}\". Please run a backtest first.`);\n            }\n            throw new Error(`Error fetching backtest results: ${response.statusText}`);\n        }\n        \n        const results = await response.json();\n        console.log(`SERVICE: Returning backtest results for ${strategyId}`);\n        return results;\n    } catch (error) {\n        console.error(`SERVICE: Error fetching backtest results for ${strategyId}:`, error);\n        throw error;\n    }\n}\n\n/**\n * Triggers a new backtest run for a strategy with specific parameters.\n * TODO: Implement the backend logic to queue or start a backtest process.\n * This function would likely send a request to your backend API.\n * @param strategyId The ID of the strategy to backtest.\n * @param parameters Parameters for the backtest (e.g., dates, capital, symbol, timeframe).\n * @returns A promise that resolves when the backtest is successfully queued (e.g., returns a job ID).\n */\nexport async function runBacktest(strategyId: string, parameters: {\n    startDate: string; // Expecting 'YYYY-MM-DD' format\n    endDate: string;   // Expecting 'YYYY-MM-DD' format\n    initialCapital: number;\n    symbol: string;\n    timeframe: string; // e.g., '1d', '1h'\n    // Add other potential parameters like leverage, specific strategy params overrides, etc.\n}): Promise<{ jobId: string }> {\n    console.log(`SERVICE: Requesting backtest run for strategy: ${strategyId} with params:`, parameters);\n    \n    // Check if dataset exists for the requested symbol and timeframe\n    const datasetCheck = await checkDatasetAvailability(parameters.symbol, parameters.timeframe);\n    \n    if (!datasetCheck.available) {\n        throw new Error(`No dataset available for ${parameters.symbol} with timeframe ${parameters.timeframe}. Please download the data first.`);\n    }\n    \n    console.log(`Found ${datasetCheck.count} datasets for ${parameters.symbol} with timeframe ${parameters.timeframe}`);\n\n    // --- Backend actions needed here: ---\n    // 1. Validate strategyId and parameters.\n    // 2. Find the strategy code (e.g., path to the .py file associated with strategyId).\n    // 3. Queue a job in a task queue (like Celery, RQ, BullMQ) or directly invoke the backtesting engine.\n    // 4. Pass the strategy code path and *all relevant parameters* (dates, capital, symbol, timeframe, etc.) to the job.\n    // 5. The job runner would execute Lumibot (or similar).\n    // 6. Upon completion, the job runner saves the results (summary, equity curve, trades, *parameters used*) to the database/store, possibly associated with the job ID and strategy ID. Also update job status.\n    // 7. Optionally update the strategy status (e.g., 'Backtesting').\n    // -------------------------------------\n\n    try {\n        // Send the backtest request to the API\n        const response = await fetch(`${API_BASE_URL}/backtesting/run`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                strategy_id: strategyId,\n                parameters: parameters\n            }),\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Error starting backtest: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log(`SERVICE: Backtest job queued/started for ${strategyId}. Job ID: ${result.jobId}`);\n        return { jobId: result.jobId };\n    } catch (error) {\n        console.error(`SERVICE: Error starting backtest for ${strategyId}:`, error);\n        throw error;\n    }\n}\n\n/**\n * Fetches the status of a specific backtest job.\n * TODO: Implement backend logic to check job status from the task queue or job store.\n * @param jobId The ID of the backtest job.\n * @returns A promise resolving to the job status ('PENDING', 'RUNNING', 'COMPLETED', 'FAILED').\n */\nexport async function getBacktestJobStatus(jobId: string): Promise<JobStatus> {\n    try {\n        const response = await fetch(`${API_BASE_URL}/backtesting/jobs/${jobId}/status`);\n        \n        if (!response.ok) {\n            throw new Error(`Error fetching job status: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        return result.status as JobStatus;\n    } catch (error) {\n        console.error(`SERVICE: Error checking status for job ${jobId}:`, error);\n        throw error;\n    }\n}\n\n/**\n * Checks if a dataset is available for the given symbol and timeframe.\n * In a real implementation, this would query the datasets API.\n * @param symbol The trading symbol (e.g., 'AAPL', 'BTC/USD')\n * @param timeframe The timeframe (e.g., '1d', '1h', '15m')\n * @returns A promise resolving to an object with available status and count\n */\nexport async function checkDatasetAvailability(symbol: string, timeframe: string): Promise<{\n    available: boolean,\n    count: number,\n    start_date?: string,\n    end_date?: string,\n    has_date_range: boolean\n}> {\n    console.log(`SERVICE: Checking dataset availability for ${symbol} (${timeframe})`);\n    \n    try {\n        // Query the datasets API to check if a dataset exists for this symbol and timeframe\n        const response = await fetch(`${API_BASE_URL}/datasets/check?symbol=${encodeURIComponent(symbol)}&timeframe=${encodeURIComponent(timeframe)}`);\n        \n        if (!response.ok) {\n            throw new Error(`Error checking dataset availability: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log(`Found ${result.count} datasets for ${symbol} with timeframe ${timeframe}`);\n        \n        return {\n            available: result.available,\n            count: result.count || 0,\n            start_date: result.start_date,\n            end_date: result.end_date,\n            has_date_range: result.has_date_range || false\n        };\n    } catch (error) {\n        console.error(`SERVICE: Error checking dataset availability:`, error);\n        return {\n            available: false,\n            count: 0,\n            has_date_range: false\n        };\n    }\n}\n\n/**\n * Downloads market data for a specific symbol and timeframe.\n * In a real implementation, this would connect to the broker API.\n * @param symbol The trading symbol (e.g., 'AAPL', 'BTC/USD')\n * @param timeframe The timeframe (e.g., '1d', '1h', '15m')\n * @param startDate The start date for the data\n * @param endDate The end date for the data\n * @returns A promise resolving to true if the download was successful\n */\nexport async function downloadMarketData(\n    symbol: string,\n    timeframe: string,\n    startDate: string,\n    endDate: string\n): Promise<boolean> {\n    console.log(`SERVICE: Downloading market data for ${symbol} (${timeframe}) from ${startDate} to ${endDate}`);\n    \n    try {\n        // First check if the dataset already exists\n        const datasetCheck = await checkDatasetAvailability(symbol, timeframe);\n        \n        if (datasetCheck.available) {\n            console.log(`SERVICE: Dataset for ${symbol} (${timeframe}) already exists. No need to download.`);\n            return true;\n        }\n        \n        // Make an API call to the backend to download the data\n        const response = await fetch(`${API_BASE_URL}/datasets/download`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                symbol,\n                timeframe,\n                startDate,\n                endDate\n            }),\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Failed to download data: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log(`SERVICE: Successfully downloaded data for ${symbol}`);\n        return true;\n    } catch (error) {\n        console.error(`SERVICE: Error downloading market data:`, error);\n        throw error;\n    }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1545, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/ai/flows/summarize-backtest-results.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Summarizes backtest results of a trading strategy in a human-readable format.\n *\n * - summarizeBacktestResults - A function that summarizes backtest results.\n * - SummarizeBacktestResultsInput - The input type for the summarizeBacktestResults function.\n * - SummarizeBacktestResultsOutput - The return type for the summarizeBacktestResults function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst SummarizeBacktestResultsInputSchema = z.object({\n  profitFactor: z.number().describe('The profit factor of the trading strategy (Gross Profit / Gross Loss). Higher is better (>1).'),\n  drawdown: z.number().describe('The maximum peak-to-trough decline in portfolio value during the backtest (as a percentage, e.g., 15 for 15%). Lower is better.'),\n  winRate: z.number().describe('The percentage of trades that were profitable (e.g., 65 for 65%).'),\n  totalTrades: z.number().describe('The total number of trades executed in the backtest.'),\n  netProfit: z.number().describe('The total net profit or loss of the trading strategy over the backtest period.'),\n  strategyDescription: z.string().describe('A brief description of the trading strategy being analyzed.'),\n});\nexport type SummarizeBacktestResultsInput = z.infer<typeof SummarizeBacktestResultsInputSchema>;\n\nconst SummarizeBacktestResultsOutputSchema = z.object({\n  summary: z.string().describe('A concise, human-readable interpretation of the backtest results, highlighting strengths and weaknesses.'),\n});\nexport type SummarizeBacktestResultsOutput = z.infer<typeof SummarizeBacktestResultsOutputSchema>;\n\nexport async function summarizeBacktestResults(\n  input: SummarizeBacktestResultsInput\n): Promise<SummarizeBacktestResultsOutput> {\n  // Basic validation before calling flow\n  if (input.totalTrades <= 0) {\n       return { summary: \"No trades were executed in this backtest, so no performance analysis is possible.\" };\n   }\n  return summarizeBacktestResultsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'summarizeBacktestResultsPrompt',\n  input: {\n    schema: SummarizeBacktestResultsInputSchema, // Use the updated schema with description\n  },\n  output: {\n    schema: SummarizeBacktestResultsOutputSchema,\n  },\n  prompt: `You are an expert financial analyst interpreting backtest results for a trading strategy.\n\n  Strategy Description: {{{strategyDescription}}}\n\n  Key Backtest Metrics:\n  - Net Profit: {{{netProfit}}}\n  - Profit Factor: {{{profitFactor}}}\n  - Max Drawdown: {{{drawdown}}}%\n  - Win Rate: {{{winRate}}}%\n  - Total Trades: {{{totalTrades}}}\n\n  Based *only* on the provided metrics and strategy description, provide a concise (2-4 sentences) human-readable interpretation. Focus on the potential viability, strengths, and weaknesses indicated by these numbers.\n\n  - Is the strategy profitable overall (Net Profit > 0)?\n  - How efficient is it at generating profit (Profit Factor)? (Good > 1.5, Excellent > 2.0)\n  - How risky is it (Max Drawdown)? (Low < 10%, Moderate < 20%, High > 20%)\n  - How often does it win (Win Rate)? (Good > 55%)\n  - Is the number of trades sufficient for statistical significance (e.g., > 30-50 trades)?\n\n  Combine these points into a brief, insightful summary. Avoid making definitive predictions about future performance. Start the summary directly, without preamble like \"Summary:\".\n\n  Example Interpretation Structure:\n  \"This [profitable/unprofitable] strategy shows [strong/moderate/weak] profit efficiency (PF: {{{profitFactor}}}) but comes with [low/moderate/high] risk (MDD: {{{drawdown}}}%). The [high/moderate/low] win rate ({{{winRate}}}%) over {{{totalTrades}}} trades suggests [consistency/inconsistency]. Overall, it [appears promising but needs risk management / needs improvement / shows potential / etc.].\"\n\n  Your Summary:\n  `,\n});\n\n\nconst summarizeBacktestResultsFlow = ai.defineFlow<\n  typeof SummarizeBacktestResultsInputSchema,\n  typeof SummarizeBacktestResultsOutputSchema\n>(\n  {\n    name: 'summarizeBacktestResultsFlow',\n    inputSchema: SummarizeBacktestResultsInputSchema,\n    outputSchema: SummarizeBacktestResultsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;IA4BsB","debugId":null}},
    {"offset": {"line": 1557, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/chart.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\" // Keep this as the main import\n// REMOVED: import { Candlestick as RechartsCandlestick } from \"recharts\" // This was incorrect\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {/* Handle array value for Candlestick */}\n                          {Array.isArray(item.value) ? `O: ${item.value[0]} H: ${item.value[1]} L: ${item.value[2]} C: ${item.value[3]}` : item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n  // Expose RechartsPrimitive.Candlestick directly if it's used as a component tag\n  // This assumes Candlestick is a direct export or part of the RechartsPrimitive namespace.\n  // If it's a component, it needs to be capitalized.\n  RechartsPrimitive, // Export the whole namespace\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1904, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/app/monitoring/_components/performance-chart.tsx"],"sourcesContent":["'use client';\n\nimport { TrendingUp } from \"lucide-react\";\nimport { CartesianGrid, Line, LineChart as RechartsLineChart, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\"; // Import ResponsiveContainer\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartConfig // Import ChartConfig type\n} from \"@/components/ui/chart\";\nimport type { PerformanceDataPoint } from '@/services/monitoring-service'; // Import type\n\n\ninterface PerformanceChartProps {\n  data: PerformanceDataPoint[]; // Use the imported type\n  config?: ChartConfig; // Optional config override\n  dataKeyY?: string; // Optional: Specify which key holds the Y value (e.g., 'portfolioValue' or 'value')\n  yAxisLabel?: string; // Optional: Label for the Y axis\n}\n\nconst defaultChartConfig = {\n  value: { // Default key for generic usage\n    label: \"Value ($)\",\n    color: \"hsl(var(--chart-1))\", // Use primary color from theme\n  },\n  portfolioValue: {\n    label: \"Portfolio Value ($)\",\n    color: \"hsl(var(--chart-1))\", // Use primary color from theme\n  },\n  profit: {\n    label: \"Cumulative Profit ($)\",\n    color: \"hsl(var(--chart-2))\", // Use accent color from theme\n  },\n} satisfies ChartConfig\n\n\nexport function PerformanceChart({\n    data,\n    config: configProp,\n    dataKeyY = 'portfolioValue', // Default to portfolioValue for monitoring page\n    yAxisLabel\n}: PerformanceChartProps) {\n\n   const chartConfig = configProp || defaultChartConfig;\n   const activeDataKeyY = dataKeyY as keyof PerformanceDataPoint; // Type assertion\n\n   // Ensure the active data key exists in the config, default if not\n    const activeConfig = chartConfig[dataKeyY as keyof typeof chartConfig] || chartConfig['value'];\n    const dynamicLabel = String(yAxisLabel || activeConfig?.label || \"Value ($)\");\n\n   // Find min/max for dynamic Y-axis domains with padding\n    const values = data.map(d => Number(d[activeDataKeyY]));\n    const minValue = Math.min(...values);\n    const maxValue = Math.max(...values);\n    const valuePadding = (maxValue - minValue) * 0.1 || 1000; // Add 10% padding or 1000\n\n    // Check if 'profit' key exists and calculate its domain if it does\n    const hasProfitData = data.length > 0 && data[0].hasOwnProperty('profit');\n    let minProfit = 0, maxProfit = 0, profitPadding = 0;\n    if (hasProfitData) {\n        const profits = data.map(d => d.profit);\n        minProfit = Math.min(...profits);\n        maxProfit = Math.max(...profits);\n        profitPadding = (maxProfit - minProfit) * 0.1 || 100;\n    }\n\n  return (\n     // Use ChartContainer for consistent styling and context if needed elsewhere\n     <ChartContainer config={chartConfig} className=\"aspect-auto h-[300px] w-full\">\n      {data.length > 0 ? (\n          // ResponsiveContainer ensures the chart fills its parent\n          // Removed ResponsiveContainer wrapper as ChartContainer includes it\n          <RechartsLineChart\n            accessibilityLayer\n            data={data}\n            margin={{\n              left: 12,\n              right: hasProfitData ? 12 : 12, // Adjust right margin if profit axis is present\n              top: 12,\n              bottom: 12,\n            }}\n          >\n            <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"date\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => {\n                 try {\n                    const date = new Date(value);\n                     if (isNaN(date.getTime())) return value;\n                     // Use shorter format for potentially more data points in backtest\n                     return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: '2-digit' });\n                 } catch (error) {\n                     return value;\n                 }\n              }}\n               interval=\"preserveStartEnd\"\n               minTickGap={50} // Increase gap for potentially denser data\n            />\n            <YAxis\n                yAxisId=\"left\"\n                tickLine={false}\n                axisLine={false}\n                tickMargin={8}\n                tickFormatter={(value) => `$${(value / 1000).toFixed(value < 10000 ? 1 : 0)}k`} // More dynamic formatting\n                domain={[Math.max(0, minValue - valuePadding), maxValue + valuePadding]} // Dynamic domain with padding, floor at 0\n                // label={{ value: dynamicLabel, angle: -90, position: 'insideLeft', style: { textAnchor: 'middle', fill: 'hsl(var(--muted-foreground))' }, dy: -10 }} // Optional Y Axis Label\n              />\n              {/* Conditionally render Profit axis only if data exists */}\n              {hasProfitData && (\n                  <YAxis\n                    yAxisId=\"right\"\n                    orientation=\"right\"\n                    tickLine={false}\n                    axisLine={false}\n                    tickMargin={8}\n                    tickFormatter={(value) => `$${value.toLocaleString()}`}\n                    domain={[minProfit - profitPadding, maxProfit + profitPadding]}\n                  />\n              )}\n            <ChartTooltip\n              cursor={true}\n              content={<ChartTooltipContent indicator=\"dot\" />} // Removed hideLabel, let it show date\n            />\n            <Line\n              dataKey={dataKeyY}\n              type=\"monotone\"\n              stroke={`var(--color-${dataKeyY})`} // Use dynamic color from config\n              strokeWidth={2}\n              dot={false}\n              yAxisId=\"left\"\n              name={dynamicLabel} // Use the dynamic label for the tooltip name\n            />\n             {/* Conditionally render Profit line */}\n             {hasProfitData && chartConfig.profit && (\n                 <Line\n                    dataKey=\"profit\"\n                    type=\"monotone\"\n                    stroke=\"var(--color-profit)\"\n                    strokeWidth={2}\n                    dot={false}\n                    yAxisId=\"right\"\n                    name={chartConfig.profit.label as string || \"Cumulative Profit ($)\"}\n                  />\n             )}\n          </RechartsLineChart>\n       ) : (\n           <div className=\"flex h-full w-full items-center justify-center text-muted-foreground\">\n               No performance data available.\n           </div>\n       )}\n    </ChartContainer>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2105, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/app/backtesting/_components/advanced-visualizations.tsx"],"sourcesContent":["\n'use client';\n\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Pie,\n  PieChart,\n  Cell,\n  Tooltip as RechartsTooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n  ComposedChart,\n} from 'recharts';\n// Removed direct import of Candlestick and redundant RechartsPrimitive import\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartConfig, RechartsPrimitive } from '@/components/ui/chart'; // Import RechartsPrimitive from ui/chart\nimport type { BacktestTrade } from '@/services/backtesting-service';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useState, useMemo } from 'react';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface AdvancedVisualizationsProps {\n  trades: BacktestTrade[];\n  isLoading: boolean;\n  equityCurve?: { date: string; open?: number; high?: number; low?: number; close: number }[];\n}\n\nconst barChartConfig = {\n  pnl: { label: 'P&L ($)', color: 'hsl(var(--chart-1))' },\n} satisfies ChartConfig;\n\nconst pieChartConfig = {\n  winning: { label: 'Winning Trades', color: 'hsl(var(--chart-2))' },\n  losing: { label: 'Losing Trades', color: 'hsl(var(--destructive))' },\n} satisfies ChartConfig;\n\nconst candlestickChartConfig = {\n  value: { label: 'Value ($)', color: 'hsl(var(--chart-1))' },\n} satisfies ChartConfig;\n\n// Helper to group trades by month\nconst groupTradesByMonth = (trades: BacktestTrade[]) => {\n  const monthlyPnl: Record<string, number> = {};\n  trades.forEach((trade) => {\n    try {\n      if (!trade.exitTimestamp || isNaN(new Date(trade.exitTimestamp).getTime())) {\n        console.warn('Invalid or missing trade exit timestamp for grouping:', trade);\n        return;\n      }\n      const month = new Date(trade.exitTimestamp).toISOString().slice(0, 7);\n      monthlyPnl[month] = (monthlyPnl[month] || 0) + trade.pnl;\n    } catch (e) {\n      console.error('Error processing trade timestamp for grouping:', trade.exitTimestamp, e);\n    }\n  });\n  return Object.entries(monthlyPnl)\n    .map(([month, pnl]) => ({ month, pnl: parseFloat(pnl.toFixed(2)) }))\n    .sort((a, b) => a.month.localeCompare(b.month));\n};\n\nexport function AdvancedVisualizations({ trades, isLoading, equityCurve = [] }: AdvancedVisualizationsProps) {\n  const [candlestickRange, setCandlestickRange] = useState<string>('all');\n\n  const monthlyPnlData = useMemo(() => groupTradesByMonth(trades), [trades]);\n  const winLossData = useMemo(() => {\n    const winningTrades = trades.filter((t) => t.pnl > 0).length;\n    const losingTrades = trades.filter((t) => t.pnl <= 0).length;\n    return [\n      { name: 'Winning Trades', value: winningTrades, fill: 'var(--color-winning)' },\n      { name: 'Losing Trades', value: losingTrades, fill: 'var(--color-losing)' },\n    ];\n  }, [trades]);\n\n  const filteredCandlestickData = useMemo(() => {\n    if (!equityCurve || equityCurve.length === 0) return [];\n    const validEquityCurve = equityCurve.filter((d) => d.date && !isNaN(new Date(d.date).getTime()));\n    if (validEquityCurve.length === 0) return [];\n    if (candlestickRange === 'all') {\n      return validEquityCurve;\n    }\n    const endDate = new Date(validEquityCurve[validEquityCurve.length - 1].date);\n    let startDate = new Date(endDate);\n    switch (candlestickRange) {\n      case '3m':\n        startDate.setMonth(startDate.getMonth() - 3);\n        break;\n      case '6m':\n        startDate.setMonth(startDate.getMonth() - 6);\n        break;\n      case '1y':\n        startDate.setFullYear(startDate.getFullYear() - 1);\n        break;\n      default:\n        return validEquityCurve;\n    }\n    const startIndex = validEquityCurve.findIndex((d) => new Date(d.date) >= startDate);\n    return startIndex === -1 ? [] : validEquityCurve.slice(startIndex);\n  }, [equityCurve, candlestickRange]);\n\n  // --- Render Functions ---\n\n  const renderMonthlyPnlChart = () => (\n    <Card>\n      <CardHeader>\n        <CardTitle>Monthly P&amp;L</CardTitle>\n        <CardDescription>Profit and loss aggregated by month.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={barChartConfig} className=\"aspect-auto h-[250px] w-full\">\n          {isLoading ? (\n            <Skeleton className=\"h-full w-full\" />\n          ) : monthlyPnlData.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={monthlyPnlData} margin={{ top: 5, right: 5, left: -15, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                <XAxis dataKey=\"month\" tickLine={false} axisLine={false} tickMargin={8} fontSize={10} />\n                <YAxis\n                  tickFormatter={(value) => `$${value}`}\n                  tickLine={false}\n                  axisLine={false}\n                  tickMargin={8}\n                  fontSize={10}\n                />\n                <ChartTooltip\n                  cursor={{ fill: 'hsl(var(--muted))', opacity: 0.3 }}\n                  content={<ChartTooltipContent indicator=\"dot\" />}\n                />\n                <Bar dataKey=\"pnl\" name=\"Monthly P&L\">\n                  {monthlyPnlData.map((entry) => (\n                    <Cell\n                      key={`cell-${entry.month}`}\n                      fill={entry.pnl >= 0 ? 'hsl(var(--chart-2))' : 'hsl(var(--destructive))'}\n                    />\n                  ))}\n                </Bar>\n              </BarChart>\n            </ResponsiveContainer>\n          ) : (\n            <div className=\"flex h-full w-full items-center justify-center text-muted-foreground\">\n              No trade data for monthly P&amp;L chart.\n            </div>\n          )}\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n\n  const renderWinLossPieChart = () => (\n    <Card>\n      <CardHeader>\n        <CardTitle>Trade Distribution</CardTitle>\n        <CardDescription>Ratio of winning vs. losing trades.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex justify-center\">\n        {/* Define CSS variables for fill colors */}\n        <style jsx global>{`\n          :root {\n            --color-winning: hsl(var(--chart-2));\n            --color-losing: hsl(var(--destructive));\n          }\n          .dark {\n            --color-winning: hsl(var(--chart-2));\n            --color-losing: hsl(var(--destructive));\n          }\n        `}</style>\n        <ChartContainer config={pieChartConfig} className=\"aspect-square h-[200px]\">\n          {isLoading ? (\n            <Skeleton className=\"h-full w-full rounded-full\" />\n          ) : trades.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <ChartTooltip content={<ChartTooltipContent hideLabel />} />\n                <Pie\n                  data={winLossData}\n                  dataKey=\"value\"\n                  nameKey=\"name\"\n                  innerRadius={50}\n                  outerRadius={80}\n                  strokeWidth={2}\n                  cy=\"50%\"\n                >\n                  {winLossData.map((entry) => (\n                    <Cell key={`cell-${entry.name}`} fill={entry.fill} stroke={entry.fill} />\n                  ))}\n                </Pie>\n                <Legend verticalAlign=\"bottom\" height={36} />\n              </PieChart>\n            </ResponsiveContainer>\n          ) : (\n            <div className=\"flex h-full w-full items-center justify-center text-muted-foreground\">\n              No trade data for win/loss chart.\n            </div>\n          )}\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n\n  const renderCandlestickChart = () => {\n    const hasOHLC =\n      filteredCandlestickData.length > 0 &&\n      filteredCandlestickData.every(\n        (d) =>\n          typeof d.open === 'number' &&\n          typeof d.high === 'number' &&\n          typeof d.low === 'number' &&\n          typeof d.close === 'number'\n      );\n    const hasEnoughData = filteredCandlestickData.length > 1;\n\n    const chartData = hasOHLC\n      ? filteredCandlestickData\n          .slice() // Create a shallow copy before sorting to avoid mutating the original array\n          .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n          .map((d) => ({\n            date: d.date,\n            open: d.open!,\n            high: d.high!,\n            low: d.low!,\n            close: d.close!,\n          }))\n      : [];\n\n    let yDomain: [number, number] = [0, 10000];\n    if (hasOHLC && hasEnoughData) {\n      const lows = filteredCandlestickData.map((d) => d.low!).filter((v) => typeof v === 'number');\n      const highs = filteredCandlestickData.map((d) => d.high!).filter((v) => typeof v === 'number');\n      if (lows.length > 0 && highs.length > 0) {\n        const minVal = Math.min(...lows);\n        const maxVal = Math.max(...highs);\n        const padding = (maxVal - minVal) * 0.1 || (maxVal * 0.1);\n        yDomain = [Math.max(0, minVal - padding), maxVal + padding];\n      }\n    }\n\n    return (\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <div>\n            <CardTitle>Equity Candlestick Chart</CardTitle>\n            <CardDescription>Visualizes equity movement over the selected period.</CardDescription>\n          </div>\n          <Select\n            value={candlestickRange}\n            onValueChange={setCandlestickRange}\n            disabled={isLoading || !hasOHLC || !hasEnoughData}\n          >\n            <SelectTrigger className=\"w-[100px]\">\n              <SelectValue placeholder=\"Range\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Time</SelectItem>\n              <SelectItem value=\"1y\">1 Year</SelectItem>\n              <SelectItem value=\"6m\">6 Months</SelectItem>\n              <SelectItem value=\"3m\">3 Months</SelectItem>\n            </SelectContent>\n          </Select>\n        </CardHeader>\n        <CardContent>\n          <ChartContainer config={candlestickChartConfig} className=\"aspect-video h-[300px] w-full\">\n            {isLoading ? (\n              <Skeleton className=\"h-full w-full\" />\n            ) : hasOHLC && hasEnoughData ? (\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <ComposedChart data={chartData} margin={{ top: 5, right: 5, left: 0, bottom: 5 }}>\n                  <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                  <XAxis\n                    dataKey=\"date\"\n                    tickLine={false}\n                    axisLine={false}\n                    tickMargin={8}\n                    fontSize={10}\n                    interval=\"preserveStartEnd\"\n                    minTickGap={40}\n                    tickFormatter={(value) => {\n                      try {\n                        return new Date(value).toLocaleDateString('en-US', { month: 'numeric', day: 'numeric' });\n                      } catch (error) {\n                        return value;\n                      }\n                    }}\n                  />\n                  <YAxis\n                    orientation=\"left\"\n                    domain={yDomain}\n                    tickLine={false}\n                    axisLine={false}\n                    tickMargin={8}\n                    fontSize={10}\n                    tickFormatter={(value) =>\n                      `$${value.toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n                    }\n                    width={50}\n                  />\n                  <RechartsTooltip\n                    cursor={{ strokeDasharray: '3 3' }}\n                    content={({ active, payload, label }) => {\n                      if (active && payload && payload.length) {\n                        const data = payload[0].payload;\n                        if (\n                          data &&\n                          typeof data.open === 'number' &&\n                          typeof data.high === 'number' &&\n                          typeof data.low === 'number' &&\n                          typeof data.close === 'number'\n                        ) {\n                          // Ensure date is formatted correctly\n                          const formattedDate = new Date(label).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });\n                          return (\n                            <div className=\"rounded-lg border bg-background p-2 shadow-sm\">\n                                <div className=\"grid grid-cols-2 gap-2\">\n                                    <div className=\"flex flex-col\">\n                                        <span className=\"text-[0.70rem] uppercase text-muted-foreground\">Date</span>\n                                        <span className=\"font-bold\">{formattedDate}</span>\n                                    </div>\n                                      <div className=\"flex flex-col\">\n                                        <span className=\"text-[0.70rem] uppercase text-muted-foreground\">Close</span>\n                                         <span className={`font-bold ${data.close >= data.open ? 'text-green-600' : 'text-red-600'}`}>\n                                            ${data.close?.toFixed(2) ?? 'N/A'}\n                                         </span>\n                                    </div>\n                                      <div className=\"flex flex-col\">\n                                        <span className=\"text-[0.70rem] uppercase text-muted-foreground\">Open</span>\n                                        <span className=\"font-bold text-muted-foreground\">${data.open?.toFixed(2) ?? 'N/A'}</span>\n                                    </div>\n                                      <div className=\"flex flex-col\">\n                                        <span className=\"text-[0.70rem] uppercase text-muted-foreground\">High</span>\n                                        <span className=\"font-bold text-muted-foreground\">${data.high?.toFixed(2) ?? 'N/A'}</span>\n                                    </div>\n                                      <div className=\"flex flex-col\">\n                                        <span className=\"text-[0.70rem] uppercase text-muted-foreground\">Low</span>\n                                        <span className=\"font-bold text-muted-foreground\">${data.low?.toFixed(2) ?? 'N/A'}</span>\n                                    </div>\n                                </div>\n                            </div>\n                          );\n                        }\n                      }\n                      return null;\n                    }}\n                  />\n                  <ReferenceLine y={0} stroke=\"hsl(var(--muted-foreground))\" strokeDasharray=\"3 3\" />\n                  <RechartsPrimitive.Candlestick\n                    dataKey=\"close\" // This should be a value that exists in chartData objects if used as dataKey like this\n                    // If you map chartData to have a 'value' array like [open, high, low, close], then use dataKey=\"value\"\n                    // Or, directly provide individual keys if Candlestick component supports it:\n                    openKey=\"open\"\n                    highKey=\"high\"\n                    lowKey=\"low\"\n                    closeKey=\"close\" // This was missing, which is crucial\n                    fill=\"hsl(var(--primary))\" // Base fill color\n                    stroke=\"hsl(var(--primary-foreground))\" // Border color\n                    isAnimationActive={false}\n                    // upColor=\"hsl(var(--chart-2))\" // Optional override for up candles\n                    // downColor=\"hsl(var(--destructive))\" // Optional override for down candles\n                  />\n                </ComposedChart>\n              </ResponsiveContainer>\n            ) : (\n              <div className=\"flex h-full w-full items-center justify-center text-muted-foreground\">\n                 {isLoading ? 'Loading...' : !hasOHLC ? 'OHLC data not available for candlestick chart.' : 'Not enough data points for candlestick chart.'}\n              </div>\n            )}\n          </ChartContainer>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6 mt-6\">\n         {renderMonthlyPnlChart()}\n         {renderWinLossPieChart()}\n         <div className=\"md:col-span-2\">\n             {renderCandlestickChart()}\n         </div>\n         {/* Optional: Trade Log Section */}\n         <Card className=\"md:col-span-2\">\n            <CardHeader>\n                 <CardTitle>Trade Log</CardTitle>\n                 <CardDescription>Detailed list of trades executed during the backtest.</CardDescription>\n            </CardHeader>\n            <CardContent>\n                <ScrollArea className=\"h-[300px] w-full rounded-md border p-4\">\n                    {isLoading ? (\n                        <Skeleton className=\"h-full w-full\" />\n                    ) : trades.length > 0 ? (\n                        <ul className=\"space-y-2\">\n                            {trades.map((trade, index) => (\n                                <li key={index} className=\"text-xs text-muted-foreground\">\n                                    {trade.direction} {trade.symbol} @ {trade.entryPrice} -&gt; {trade.exitPrice} (P&amp;L: {trade.pnl.toFixed(2)}) [{new Date(trade.entryTimestamp).toLocaleString()} - {new Date(trade.exitTimestamp).toLocaleString()}]\n                                </li>\n                            ))}\n                        </ul>\n                    ) : (\n                        <p className=\"text-center text-muted-foreground py-4\">No trades recorded for this backtest.</p>\n                    )}\n                </ScrollArea>\n            </CardContent>\n        </Card>\n    </div>\n  );\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3071, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/app/backtesting/page.tsx"],"sourcesContent":["// src/app/backtesting/page.tsx\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar as CalendarIcon, Loader2, AlertTriangle, MessageSquareText, Download } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { format } from \"date-fns\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { cn } from \"@/lib/utils\";\nimport { getStrategies, Strategy } from '@/services/strategies-service';\nimport { getAvailableAssets } from '@/services/broker-service'; // Mock service for assets\nimport { runBacktest, getBacktestResults, BacktestResults, getBacktestJobStatus, checkDatasetAvailability } from '@/services/backtesting-service';\nimport { summarizeBacktestResults } from '@/ai/flows/summarize-backtest-results';\nimport { PerformanceChart } from '@/app/monitoring/_components/performance-chart'; // Reuse chart\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AdvancedVisualizations } from './_components/advanced-visualizations'; // Import advanced charts\n\n// Validation Schema\nconst backtestFormSchema = z.object({\n    strategyId: z.string().min(1, { message: \"Please select a strategy.\" }),\n    asset: z.string().min(1, { message: \"Please select an asset.\" }),\n    startDate: z.date({ required_error: \"Start date is required.\" }),\n    endDate: z.date({ required_error: \"End date is required.\" }),\n    initialCapital: z.coerce.number().min(100, { message: \"Initial capital must be at least $100.\" }).default(10000),\n    timeframe: z.enum([\"1m\", \"5m\", \"15m\", \"1h\", \"4h\", \"1d\"]).default(\"1d\"),\n}).refine((data) => data.endDate > data.startDate, {\n    message: \"End date must be after start date.\",\n    path: [\"endDate\"], // Field to attach error to\n});\n\ntype BacktestFormData = z.infer<typeof backtestFormSchema>;\n\nenum BacktestState {\n    IDLE = 'idle',\n    QUEUING = 'queuing', // Waiting for backend to start the job\n    RUNNING = 'running', // Backend is processing the backtest\n    FETCHING = 'fetching', // Fetching results after completion\n    SUMMARIZING = 'summarizing', // AI summary generation\n    COMPLETE = 'complete',\n    ERROR = 'error',\n}\n\n// Type guard to check if a state is one of the specified states\nconst isState = (state: BacktestState, ...validStates: BacktestState[]): boolean => {\n    return validStates.includes(state);\n};\n\n// Helper to format numbers/currency/percentage\nconst formatValue = (value: number | undefined, type: 'currency' | 'percentage' | 'number' | 'factor') => {\n    if (value === undefined || value === null) return <Skeleton className=\"h-5 w-16 inline-block\" />;\n    switch (type) {\n        case 'currency':\n            return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value);\n        case 'percentage':\n            return `${value.toFixed(1)}%`;\n        case 'factor':\n            return value.toFixed(2); // For profit factor, etc.\n        case 'number':\n        default:\n            return value.toLocaleString();\n    }\n};\n\n// Prepare data for candlestick (needs OHLC structure)\n// This is a placeholder - actual OHLC data needs to come from the backtesting service\nconst transformEquityToCandlestick = (equityCurve: BacktestResults['equityCurve']) => {\n    // Mock OHLC data based on portfolioValue - replace with real data\n    return equityCurve.map((point, index, arr) => {\n        const prevClose = index > 0 ? arr[index - 1].portfolioValue : point.portfolioValue;\n        const open = prevClose; // Simple mock: open is previous close\n        const close = point.portfolioValue;\n        const high = Math.max(open, close) * (1 + Math.random() * 0.01); // Add small random variance\n        const low = Math.min(open, close) * (1 - Math.random() * 0.01); // Add small random variance\n        return {\n            date: point.date,\n            open: parseFloat(open.toFixed(2)),\n            high: parseFloat(high.toFixed(2)),\n            low: parseFloat(low.toFixed(2)),\n            close: parseFloat(close.toFixed(2)),\n        };\n    });\n}\n\n\nexport default function BacktestingPage() {\n    const { toast } = useToast();\n    const [strategies, setStrategies] = useState<Strategy[]>([]);\n    const [assets, setAssets] = useState<string[]>([]);\n    const [backtestState, setBacktestState] = useState<BacktestState>(BacktestState.IDLE);\n    const [backtestResults, setBacktestResults] = useState<BacktestResults | null>(null);\n    const [aiSummary, setAiSummary] = useState<string | null>(null);\n    const [error, setError] = useState<string | null>(null);\n    const [jobId, setJobId] = useState<string | null>(null); // To track the running job\n    const [isInitialDataLoading, setIsInitialDataLoading] = useState(true); // Track initial load\n    const [isBrokerConnected, setIsBrokerConnected] = useState(false); // Track if broker is connected\n    const [isTickDataAvailable, setIsTickDataAvailable] = useState(true); // Track if tick data is available\n    const [showDownloadDialog, setShowDownloadDialog] = useState(false); // Control download dialog visibility\n    const [isDownloading, setIsDownloading] = useState(false); // Track download state\n\n    const form = useForm<BacktestFormData>({\n        resolver: zodResolver(backtestFormSchema),\n        defaultValues: {\n            strategyId: \"\",\n            asset: \"\",\n            initialCapital: 10000,\n            timeframe: \"1d\",\n            // Default dates can be tricky, might leave blank or set relative defaults\n            // startDate: new Date(new Date().setFullYear(new Date().getFullYear() - 1)), // Default 1 year ago\n            // endDate: new Date(), // Default today\n        },\n    });\n\n    // Fetch strategies and check broker connection on mount\n    useEffect(() => {\n        async function loadInitialData() {\n            setIsInitialDataLoading(true); // Start loading\n            try {\n                // Fetch only non-archived strategies for the dropdown\n                const fetchedStrategies = await getStrategies(false);\n                setStrategies(fetchedStrategies);\n                \n                // Check if broker is connected by trying to get configured brokers\n                const { getConfiguredBrokers } = await import('@/services/settings-service');\n                const brokers = await getConfiguredBrokers();\n                const brokerConnected = brokers && brokers.length > 0;\n                setIsBrokerConnected(brokerConnected);\n                \n                // Only fetch assets if broker is connected\n                if (brokerConnected) {\n                    const fetchedAssets = await getAvailableAssets();\n                    setAssets(fetchedAssets);\n                }\n            } catch (err) {\n                console.error(\"Failed to load initial data:\", err);\n                setError(\"Failed to load strategies or broker connection. Please refresh.\");\n                toast({ title: \"Error\", description: \"Could not load initial data.\", variant: \"destructive\" });\n            } finally {\n                setIsInitialDataLoading(false); // Finish loading\n            }\n        }\n        loadInitialData();\n    }, [toast]);\n\n     // Polling for job status (simple example)\n     useEffect(() => {\n        let intervalId: NodeJS.Timeout | null = null;\n        if (backtestState === BacktestState.RUNNING && jobId) {\n            intervalId = setInterval(async () => {\n                try {\n                    const status = await getBacktestJobStatus(jobId);\n                    console.log(`Backtest job ${jobId} status: ${status}`);\n                    if (status === 'COMPLETED') {\n                        setBacktestState(BacktestState.FETCHING);\n                        clearInterval(intervalId!);\n                        // Use strategy ID from form state when fetching results after completion\n                        const currentStrategyId = form.getValues(\"strategyId\");\n                        if (currentStrategyId) {\n                            fetchResults(currentStrategyId);\n                        } else {\n                             console.error(\"Strategy ID missing when trying to fetch results.\");\n                             setError(\"Could not fetch results: Strategy ID missing.\");\n                             setBacktestState(BacktestState.ERROR);\n                        }\n                    } else if (status === 'FAILED') {\n                        setBacktestState(BacktestState.ERROR);\n                        setError(`Backtest job ${jobId} failed.`);\n                        toast({ title: \"Backtest Failed\", description: `The backtest process encountered an error (Job ID: ${jobId}).`, variant: \"destructive\"});\n                        clearInterval(intervalId!);\n                         // Fetch results even on failure, as they might contain error logs\n                         const currentStrategyId = form.getValues(\"strategyId\");\n                         if (currentStrategyId) {\n                             fetchResults(currentStrategyId, true); // Pass flag indicating expected failure\n                         }\n                    }\n                    // Keep polling if 'PENDING' or 'RUNNING'\n                } catch (err) {\n                    console.error(\"Error checking job status:\", err);\n                    setError(\"Failed to check backtest status.\");\n                    setBacktestState(BacktestState.ERROR);\n                    clearInterval(intervalId!);\n                }\n            }, 5000); // Poll every 5 seconds\n        }\n\n        // Cleanup interval on component unmount or state change\n        return () => {\n            if (intervalId) clearInterval(intervalId);\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [backtestState, jobId, toast]); // Add form dependency\n\n\n    const fetchResults = async (strategyId: string, expectFailure: boolean = false) => {\n         try {\n             console.log(`Fetching backtest results for strategy: ${strategyId}`);\n             const results = await getBacktestResults(strategyId);\n             setBacktestResults(results);\n             console.log(\"Backtest results fetched:\", results);\n             setBacktestState(BacktestState.COMPLETE); // Set state to complete after fetching\n             // Adjust toast message based on expected outcome\n              if (!expectFailure) {\n                  toast({ title: \"Backtest Complete\", description: \"Results loaded successfully.\"});\n              } else {\n                  toast({ title: \"Backtest Failed\", description: \"Loaded results/logs from failed backtest.\", variant: \"destructive\" });\n              }\n         } catch (err) {\n             console.error(\"Failed to fetch backtest results:\", err);\n             const errorMsg = `Failed to load backtest results. ${err instanceof Error ? err.message : 'Please try again.'}`;\n             setError(errorMsg);\n             setBacktestState(BacktestState.ERROR);\n             toast({ title: \"Error Loading Results\", description: errorMsg, variant: \"destructive\" });\n         }\n    }\n    \n    // Check if tick data is available when asset and timeframe are selected\n    const selectedAsset = form.watch('asset');\n    const selectedTimeframe = form.watch('timeframe');\n    \n    // State for dataset information\n    const [datasetInfo, setDatasetInfo] = useState<{\n        available: boolean;\n        count: number;\n        start_date?: string;\n        end_date?: string;\n        has_date_range: boolean;\n    }>({ available: false, count: 0, has_date_range: false });\n\n    useEffect(() => {\n        async function checkTickDataAvailability() {\n            if (!selectedAsset || !selectedTimeframe) {\n                setIsTickDataAvailable(true); // Default to true when nothing selected\n                setDatasetInfo({ available: false, count: 0, has_date_range: false });\n                return;\n            }\n            \n            try {\n                console.log(`Checking if tick data is available for ${selectedAsset} (${selectedTimeframe})...`);\n                const availability = await checkDatasetAvailability(selectedAsset, selectedTimeframe);\n                setIsTickDataAvailable(availability.available);\n                setDatasetInfo(availability);\n                console.log(`Tick data for ${selectedAsset} (${selectedTimeframe}) is ${availability.available ? 'available' : 'not available'}`);\n                \n                // If dataset has date range, update form date values if they're outside the range\n                if (availability.has_date_range && availability.start_date && availability.end_date) {\n                    const datasetStartDate = new Date(availability.start_date);\n                    const datasetEndDate = new Date(availability.end_date);\n                    \n                    const currentStartDate = form.getValues('startDate');\n                    const currentEndDate = form.getValues('endDate');\n                    \n                    // Adjust start date if it's before dataset start date\n                    if (currentStartDate && currentStartDate < datasetStartDate) {\n                        form.setValue('startDate', datasetStartDate);\n                        toast({\n                            title: \"Date Adjusted\",\n                            description: `Start date adjusted to match available data (${format(datasetStartDate, \"PPP\")})`,\n                            variant: \"default\"\n                        });\n                    }\n                    \n                    // Adjust end date if it's after dataset end date\n                    if (currentEndDate && currentEndDate > datasetEndDate) {\n                        form.setValue('endDate', datasetEndDate);\n                        toast({\n                            title: \"Date Adjusted\",\n                            description: `End date adjusted to match available data (${format(datasetEndDate, \"PPP\")})`,\n                            variant: \"default\"\n                        });\n                    }\n                }\n            } catch (err) {\n                console.error(\"Failed to check tick data availability:\", err);\n                setIsTickDataAvailable(false); // Assume not available on error\n                setDatasetInfo({ available: false, count: 0, has_date_range: false });\n            }\n        }\n        \n        checkTickDataAvailability();\n    }, [selectedAsset, selectedTimeframe, form, toast]);\n    // Handle tick data download\n    const handleDownloadTickData = async () => {\n        if (!selectedAsset || !selectedTimeframe) return;\n        \n        const startDate = form.getValues('startDate');\n        const endDate = form.getValues('endDate');\n        \n        if (!startDate || !endDate) {\n            toast({\n                title: \"Missing Date Range\",\n                description: \"Please select start and end dates for the download.\",\n                variant: \"destructive\"\n            });\n            return;\n        }\n        \n        // Check if we need to download additional data\n        if (datasetInfo.has_date_range && datasetInfo.start_date && datasetInfo.end_date) {\n            const datasetStartDate = new Date(datasetInfo.start_date);\n            const datasetEndDate = new Date(datasetInfo.end_date);\n            \n            // If requested dates are within available range, no need to download\n            if (startDate >= datasetStartDate && endDate <= datasetEndDate) {\n                toast({\n                    title: \"Data Already Available\",\n                    description: `The requested date range is already available in the database.`,\n                    variant: \"default\"\n                });\n                \n                // Set tick data as available and proceed\n                setIsTickDataAvailable(true);\n                return;\n            }\n            \n            // Show a more specific message about what data needs to be downloaded\n            const needEarlierData = startDate < datasetStartDate;\n            const needLaterData = endDate > datasetEndDate;\n            \n            let message = \"Need to download \";\n            if (needEarlierData && needLaterData) {\n                message += `data before ${format(datasetStartDate, \"PPP\")} and after ${format(datasetEndDate, \"PPP\")}`;\n            } else if (needEarlierData) {\n                message += `data before ${format(datasetStartDate, \"PPP\")}`;\n            } else if (needLaterData) {\n                message += `data after ${format(datasetEndDate, \"PPP\")}`;\n            }\n            \n            toast({\n                title: \"Downloading Additional Data\",\n                description: message,\n                variant: \"default\"\n            });\n        }\n        \n        \n        setIsDownloading(true);\n        \n        try {\n            const { downloadTickData } = await import('@/services/broker-service');\n            const success = await downloadTickData(\n                selectedAsset,\n                selectedTimeframe,\n                format(startDate, \"yyyy-MM-dd\"),\n                format(endDate, \"yyyy-MM-dd\")\n            );\n            \n            if (success) {\n                toast({\n                    title: \"Download Complete\",\n                    description: `Successfully downloaded ${selectedAsset} ${selectedTimeframe} data.`\n                });\n                setIsTickDataAvailable(true);\n                setShowDownloadDialog(false);\n            } else {\n                toast({\n                    title: \"Download Failed\",\n                    description: \"Could not download the requested data. Please try again.\",\n                    variant: \"destructive\"\n                });\n            }\n        } catch (err) {\n            console.error(\"Failed to download tick data:\", err);\n            toast({\n                title: \"Download Error\",\n                description: `Error downloading data: ${err instanceof Error ? err.message : 'Unknown error'}`,\n                variant: \"destructive\"\n            });\n        } finally {\n            setIsDownloading(false);\n        }\n    };\n\n    async function onSubmit(values: BacktestFormData) {\n        setBacktestState(BacktestState.QUEUING);\n        setError(null);\n        setBacktestResults(null); // Clear previous results\n        setAiSummary(null);\n        setJobId(null);\n\n        console.log(\"Running backtest with values:\", values);\n\n        try {\n             // Include parameters expected by the backend/service\n             const backtestParams = {\n                 startDate: format(values.startDate, \"yyyy-MM-dd\"),\n                 endDate: format(values.endDate, \"yyyy-MM-dd\"),\n                 initialCapital: values.initialCapital,\n                 symbol: values.asset,\n                 timeframe: values.timeframe,\n             };\n\n            const { jobId: newJobId } = await runBacktest(values.strategyId, backtestParams);\n            setJobId(newJobId);\n            setBacktestState(BacktestState.RUNNING); // Move to running state after successful queueing\n            toast({ title: \"Backtest Started\", description: `Job ${newJobId} is running. Results will appear when complete.`});\n\n            // Polling will handle fetching results once complete\n\n        } catch (err) {\n            console.error(\"Failed to start backtest:\", err);\n            const errorMsg = `Failed to start backtest. ${err instanceof Error ? err.message : 'Please try again.'}`;\n            setError(errorMsg);\n            setBacktestState(BacktestState.ERROR);\n            toast({ title: \"Error Starting Backtest\", description: errorMsg, variant: \"destructive\" });\n        }\n    }\n\n      const handleGenerateSummary = async () => {\n        if (!backtestResults || !strategies.length) return;\n\n        // Find strategy in the unfiltered list (might be archived)\n        const strategy = strategies.find(s => s.id === backtestResults.strategyId);\n        if (!strategy) {\n             toast({ title: \"Strategy Not Found\", description: \"Could not find details for the strategy used in this backtest.\", variant: \"destructive\" });\n             return;\n         };\n\n\n        setBacktestState(BacktestState.SUMMARIZING);\n        setAiSummary(null);\n        setError(null); // Clear previous errors specifically for the summary section\n\n        try {\n            console.log(\"Generating AI summary for backtest results...\");\n            const summaryResult = await summarizeBacktestResults({\n                profitFactor: backtestResults.summaryMetrics.profitFactor,\n                drawdown: backtestResults.summaryMetrics.maxDrawdown * 100,\n                winRate: backtestResults.summaryMetrics.winRate * 100,\n                totalTrades: backtestResults.summaryMetrics.totalTrades,\n                netProfit: backtestResults.summaryMetrics.netProfit,\n                strategyDescription: strategy.description,\n            });\n            setAiSummary(summaryResult.summary);\n            console.log(\"AI summary generated:\", summaryResult.summary);\n            setBacktestState(BacktestState.COMPLETE); // Return to complete state\n            toast({ title: \"AI Summary Generated\", description: \"Successfully generated summary.\" });\n        } catch (err) {\n            console.error(\"Failed to generate AI summary:\", err);\n            const summaryError = `Failed to generate AI summary. ${err instanceof Error ? err.message : 'Please try again.'}`;\n            setError(summaryError); // Show error in the results section, specifically for summary\n            setBacktestState(BacktestState.COMPLETE); // Still show results, but with error message in summary section\n            toast({ title: \"AI Summary Error\", description: summaryError, variant: \"destructive\" });\n        }\n   };\n\n    const isLoading = backtestState === BacktestState.QUEUING || backtestState === BacktestState.RUNNING || backtestState === BacktestState.FETCHING || isInitialDataLoading;\n    const selectedStrategyName = strategies.find(s => s.id === form.watch('strategyId'))?.name || \"Strategy\";\n\n\n    // Render Functions for Clarity\n    const renderForm = () => (\n        <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                        control={form.control}\n                        name=\"strategyId\"\n                        render={({ field }) => (\n                            <FormItem>\n                                <FormLabel>Strategy</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isLoading}>\n                                    <FormControl>\n                                        <SelectTrigger>\n                                            <SelectValue placeholder=\"Select strategy...\" />\n                                        </SelectTrigger>\n                                    </FormControl>\n                                    <SelectContent>\n                                        {isInitialDataLoading && <SelectItem value=\"loading\" disabled>Loading strategies...</SelectItem>}\n                                        {!isInitialDataLoading && strategies.length === 0 && <SelectItem value=\"no-strategies\" disabled>No active strategies available.</SelectItem>}\n                                        {/* Filter out Archived strategies from the dropdown */}\n                                        {!isInitialDataLoading && strategies.filter(s => s.status !== 'Archived').map(s => <SelectItem key={s.id} value={s.id}>{s.name}</SelectItem>)}\n                                    </SelectContent>\n                                </Select>\n                                <FormMessage />\n                            </FormItem>\n                        )}\n                    />\n                    <FormField\n                        control={form.control}\n                        name=\"asset\"\n                        render={({ field }) => (\n                            <FormItem>\n                                <FormLabel>Asset/Symbol</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isLoading || !isBrokerConnected}>\n                                    <FormControl>\n                                        <SelectTrigger>\n                                            <SelectValue placeholder={isBrokerConnected ? \"Select asset...\" : \"No broker connected\"} />\n                                        </SelectTrigger>\n                                    </FormControl>\n                                    <SelectContent>\n                                         {isInitialDataLoading && <SelectItem value=\"loading-assets\" disabled>Loading assets...</SelectItem>}\n                                         {!isInitialDataLoading && !isBrokerConnected && <SelectItem value=\"no-broker\" disabled>Connect a broker in settings first</SelectItem>}\n                                         {!isInitialDataLoading && isBrokerConnected && assets.length === 0 && <SelectItem value=\"no-assets\" disabled>No assets available.</SelectItem>}\n                                         {!isInitialDataLoading && isBrokerConnected && assets.map(a => <SelectItem key={a} value={a}>{a}</SelectItem>)}\n                                    </SelectContent>\n                                </Select>\n                                <FormDescription>\n                                    {isBrokerConnected\n                                        ? \"Asset provided by your broker config.\"\n                                        : \"Connect a broker in settings to see available assets.\"}\n                                </FormDescription>\n                                <FormMessage />\n                            </FormItem>\n                        )}\n                    />\n                    \n                    {/* Display date range information if available */}\n                    {datasetInfo.has_date_range && datasetInfo.start_date && datasetInfo.end_date && (\n                        <div className=\"col-span-2 bg-muted p-3 rounded-md text-sm\">\n                            <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                                <CalendarIcon className=\"h-4 w-4\" />\n                                <span>Available data range: {format(new Date(datasetInfo.start_date), \"PPP\")} to {format(new Date(datasetInfo.end_date), \"PPP\")}</span>\n                            </div>\n                        </div>\n                    )}\n                    \n                    <FormField\n                        control={form.control}\n                        name=\"startDate\"\n                        render={({ field }) => (\n                             <FormItem className=\"flex flex-col\">\n                                <FormLabel>Start Date</FormLabel>\n                                <div className=\"flex space-x-2\">\n                                    <Input\n                                        type=\"date\"\n                                        value={field.value ? format(field.value, \"yyyy-MM-dd\") : \"\"}\n                                        onChange={(e) => {\n                                            const date = e.target.value ? new Date(e.target.value) : null;\n                                            if (date) field.onChange(date);\n                                        }}\n                                        disabled={isLoading}\n                                        className=\"w-full\"\n                                    />\n                                    <Popover>\n                                        <PopoverTrigger asChild>\n                                            <Button variant=\"outline\" size=\"icon\" disabled={isLoading}>\n                                                <CalendarIcon className=\"h-4 w-4\" />\n                                            </Button>\n                                        </PopoverTrigger>\n                                        <PopoverContent className=\"w-auto p-0\" align=\"end\">\n                                            <Calendar\n                                                mode=\"single\"\n                                                selected={field.value}\n                                                onSelect={field.onChange}\n                                                disabled={(date) =>\n                                                    date > new Date() || date < new Date(\"1990-01-01\") || isLoading\n                                                }\n                                                initialFocus\n                                            />\n                                        </PopoverContent>\n                                    </Popover>\n                                </div>\n                                <FormMessage />\n                            </FormItem>\n                        )}\n                     />\n                      <FormField\n                        control={form.control}\n                        name=\"endDate\"\n                        render={({ field }) => (\n                             <FormItem className=\"flex flex-col\">\n                                <FormLabel>End Date</FormLabel>\n                                <div className=\"flex space-x-2\">\n                                    <Input\n                                        type=\"date\"\n                                        value={field.value ? format(field.value, \"yyyy-MM-dd\") : \"\"}\n                                        onChange={(e) => {\n                                            const date = e.target.value ? new Date(e.target.value) : null;\n                                            if (date) field.onChange(date);\n                                        }}\n                                        disabled={isLoading}\n                                        className=\"w-full\"\n                                    />\n                                    <Popover>\n                                        <PopoverTrigger asChild>\n                                            <Button variant=\"outline\" size=\"icon\" disabled={isLoading}>\n                                                <CalendarIcon className=\"h-4 w-4\" />\n                                            </Button>\n                                        </PopoverTrigger>\n                                        <PopoverContent className=\"w-auto p-0\" align=\"end\">\n                                            <Calendar\n                                                mode=\"single\"\n                                                selected={field.value}\n                                                onSelect={field.onChange}\n                                                disabled={(date) =>\n                                                    date > new Date() || date < new Date(\"1990-01-01\") || isLoading\n                                                }\n                                                initialFocus\n                                            />\n                                        </PopoverContent>\n                                    </Popover>\n                                </div>\n                                <FormMessage />\n                            </FormItem>\n                        )}\n                     />\n                       <FormField\n                        control={form.control}\n                        name=\"initialCapital\"\n                        render={({ field }) => (\n                            <FormItem>\n                                <FormLabel>Initial Capital ($)</FormLabel>\n                                <FormControl>\n                                    <Input type=\"number\" placeholder=\"e.g., 10000\" {...field} disabled={isLoading}/>\n                                </FormControl>\n                                <FormMessage />\n                            </FormItem>\n                        )}\n                    />\n                    <FormField\n                        control={form.control}\n                        name=\"timeframe\"\n                        render={({ field }) => (\n                            <FormItem>\n                                <FormLabel>Timeframe</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isLoading}>\n                                    <FormControl>\n                                        <SelectTrigger>\n                                            <SelectValue placeholder=\"Select timeframe...\" />\n                                        </SelectTrigger>\n                                    </FormControl>\n                                    <SelectContent>\n                                        {/* These values should align with Lumibot or your backtester */}\n                                        <SelectItem value=\"1m\">1 Minute</SelectItem>\n                                        <SelectItem value=\"5m\">5 Minutes</SelectItem>\n                                        <SelectItem value=\"15m\">15 Minutes</SelectItem>\n                                        <SelectItem value=\"1h\">1 Hour</SelectItem>\n                                        <SelectItem value=\"4h\">4 Hours</SelectItem>\n                                        <SelectItem value=\"1d\">1 Day</SelectItem>\n                                    </SelectContent>\n                                </Select>\n                                <FormMessage />\n                            </FormItem>\n                        )}\n                    />\n                </div>\n                 <div className=\"flex flex-col md:flex-row gap-4\">\n                     {/* Disable button during queuing, running, fetching */}\n                     <Button\n                         type=\"submit\"\n                         disabled={\n                             (backtestState !== BacktestState.IDLE &&\n                             backtestState !== BacktestState.COMPLETE &&\n                             backtestState !== BacktestState.ERROR) ||\n                             !isTickDataAvailable\n                         }\n                         className=\"w-full md:w-auto\"\n                     >\n                         {backtestState === BacktestState.QUEUING ? (\n                             <>\n                                 <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                 Queuing Backtest...\n                             </>\n                         ) : backtestState === BacktestState.RUNNING ? (\n                             <>\n                                 <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                 Running Job {jobId?.substring(0, 8)}...\n                             </>\n                         ) : backtestState === BacktestState.FETCHING ? (\n                             <>\n                                 <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                 Fetching Results...\n                             </>\n                         ) : (\n                             \"Run Backtest\"\n                         )}\n                     </Button>\n                     \n                     {/* Download Data button - only show when data is not available and asset/timeframe are selected */}\n                     {selectedAsset && selectedTimeframe && !isTickDataAvailable && (\n                         <Button\n                             type=\"button\"\n                             variant=\"outline\"\n                             onClick={() => setShowDownloadDialog(true)}\n                             className=\"w-full md:w-auto\"\n                         >\n                             Download Required Data\n                         </Button>\n                     )}\n                 </div>\n                 {/* Display general error if form submission or polling fails */}\n                 {backtestState === BacktestState.ERROR && error && !backtestResults && (\n                    <div className=\"text-destructive text-sm mt-2 flex items-center\">\n                        <AlertTriangle className=\"mr-1 h-4 w-4\" />\n                        {error}\n                    </div>\n                 )}\n            </form>\n        </Form>\n    );\n    \n    // Render download dialog\n    const renderDownloadDialog = () => (\n        <Dialog open={showDownloadDialog} onOpenChange={setShowDownloadDialog}>\n            <DialogContent className=\"sm:max-w-[500px]\">\n                <DialogHeader>\n                    <DialogTitle>Download Market Data</DialogTitle>\n                    <DialogDescription>\n                        {isBrokerConnected ? (\n                            <>\n                                Historical data for {selectedAsset} ({selectedTimeframe}) is not available.\n                                Download it using the date range from your backtest configuration.\n                            </>\n                        ) : (\n                            <>\n                                <AlertTriangle className=\"h-4 w-4 text-amber-500 inline-block mr-1\" />\n                                <span className=\"text-amber-500 font-medium\">No broker or data source configured.</span>\n                                <p className=\"mt-2\">\n                                    Please configure a broker or data source in the Settings page before downloading data.\n                                    You can also configure alternative data sources like Yahoo Finance.\n                                </p>\n                            </>\n                        )}\n                    </DialogDescription>\n                </DialogHeader>\n                \n                {isBrokerConnected ? (\n                    <div className=\"grid gap-4 py-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                                <FormLabel>Start Date</FormLabel>\n                                <Input\n                                    type=\"text\"\n                                    value={form.getValues('startDate') ? format(form.getValues('startDate'), \"PPP\") : ''}\n                                    disabled\n                                />\n                            </div>\n                            <div>\n                                <FormLabel>End Date</FormLabel>\n                                <Input\n                                    type=\"text\"\n                                    value={form.getValues('endDate') ? format(form.getValues('endDate'), \"PPP\") : ''}\n                                    disabled\n                                />\n                            </div>\n                        </div>\n                        <div>\n                            <FormLabel>Asset</FormLabel>\n                            <Input type=\"text\" value={selectedAsset} disabled />\n                        </div>\n                        <div>\n                            <FormLabel>Timeframe</FormLabel>\n                            <Input type=\"text\" value={selectedTimeframe} disabled />\n                        </div>\n                    </div>\n                ) : (\n                    <div className=\"py-4\">\n                        <Button variant=\"secondary\" onClick={() => window.location.href = '/settings'}>\n                            Go to Settings\n                        </Button>\n                    </div>\n                )}\n                \n                <DialogFooter>\n                    <Button variant=\"outline\" onClick={() => setShowDownloadDialog(false)} disabled={isDownloading}>\n                        Cancel\n                    </Button>\n                    {isBrokerConnected && (\n                        <Button onClick={handleDownloadTickData} disabled={isDownloading}>\n                            {isDownloading ? (\n                                <>\n                                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                    Downloading...\n                                </>\n                            ) : (\n                                <>\n                                    <Download className=\"mr-2 h-4 w-4\" />\n                                    Download Data\n                                </>\n                            )}\n                        </Button>\n                    )}\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    );\n\n    const renderResults = () => {\n         // Show loading indicator while fetching/summarizing even if results are partially available\n         if (backtestState === BacktestState.FETCHING || backtestState === BacktestState.SUMMARIZING) {\n            return (\n                 <div className=\"flex flex-col items-center justify-center h-64 space-y-4\">\n                     <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n                     <p className=\"text-muted-foreground\">\n                        {backtestState === BacktestState.FETCHING ? 'Fetching results...' : 'Generating AI summary...'}\n                     </p>\n                 </div>\n            );\n         }\n\n        // Show global error message if state is ERROR and results haven't loaded\n         if (backtestState === BacktestState.ERROR && error && !backtestResults) {\n            return (\n                <div className=\"flex flex-col items-center justify-center h-64 text-destructive space-y-4\">\n                    <AlertTriangle className=\"h-8 w-8\" />\n                    <p className=\"text-center\">{error}</p>\n                    <Button variant=\"outline\" onClick={() => { setError(null); setBacktestState(BacktestState.IDLE); }}>Dismiss</Button>\n                </div>\n            );\n        }\n\n        // Show results if state is COMPLETE (or ERROR *after* results loaded) and results exist\n         if ((backtestState === BacktestState.COMPLETE || backtestState === BacktestState.ERROR) && backtestResults) {\n            const metrics = backtestResults.summaryMetrics;\n            // Transform equity data for candlestick (placeholder transformation)\n            const candlestickData = transformEquityToCandlestick(backtestResults.equityCurve);\n\n            return (\n                 <div className=\"space-y-6 mt-6 animate-fade-in\">\n                     {/* Performance Chart */}\n                     <Card>\n                         <CardHeader>\n                             <CardTitle>Equity Curve</CardTitle>\n                             <CardDescription>Portfolio value over the backtest period.</CardDescription>\n                         </CardHeader>\n                         <CardContent className=\"pl-2\">\n                             {backtestResults.equityCurve.length > 0 ? (\n                                 <PerformanceChart data={backtestResults.equityCurve} dataKeyY=\"portfolioValue\" />\n                             ) : (\n                                 <p className=\"text-center text-muted-foreground py-4\">No equity data available for chart.</p>\n                             )}\n                         </CardContent>\n                     </Card>\n\n                     {/* Summary Metrics */}\n                     <Card>\n                          <CardHeader>\n                             <CardTitle>Summary Metrics</CardTitle>\n                         </CardHeader>\n                         <CardContent className=\"grid grid-cols-2 md:grid-cols-3 gap-x-8 gap-y-4 text-sm\">\n                             <div>\n                                 <dt className=\"text-muted-foreground\">Net Profit</dt>\n                                 <dd className={cn(\"font-semibold\", metrics.netProfit >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400')}>\n                                     {formatValue(metrics.netProfit, 'currency')}\n                                 </dd>\n                             </div>\n                              <div>\n                                 <dt className=\"text-muted-foreground\">Profit Factor</dt>\n                                 <dd className=\"font-semibold\">{formatValue(metrics.profitFactor, 'factor')}</dd>\n                             </div>\n                             <div>\n                                 <dt className=\"text-muted-foreground\">Max Drawdown</dt>\n                                 <dd className=\"font-semibold\">{formatValue(metrics.maxDrawdown * 100, 'percentage')}</dd>\n                             </div>\n                             <div>\n                                 <dt className=\"text-muted-foreground\">Win Rate</dt>\n                                 <dd className=\"font-semibold\">{formatValue(metrics.winRate * 100, 'percentage')}</dd>\n                             </div>\n                             <div>\n                                 <dt className=\"text-muted-foreground\">Total Trades</dt>\n                                 <dd className=\"font-semibold\">{formatValue(metrics.totalTrades, 'number')}</dd>\n                             </div>\n                              <div>\n                                 <dt className=\"text-muted-foreground\">Avg Trade P&L</dt>\n                                 <dd className={cn(\"font-semibold\", metrics.avgTradePnl >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400')}>\n                                     {formatValue(metrics.avgTradePnl, 'currency')}\n                                 </dd>\n                             </div>\n                             {/* Optionally add start/end date, Sharpe ratio etc. */}\n                             {metrics.startDate && <div><dt className=\"text-muted-foreground\">Start Date</dt><dd>{metrics.startDate}</dd></div>}\n                             {metrics.endDate && <div><dt className=\"text-muted-foreground\">End Date</dt><dd>{metrics.endDate}</dd></div>}\n                             {metrics.sharpeRatio && <div><dt className=\"text-muted-foreground\">Sharpe Ratio</dt><dd>{metrics.sharpeRatio.toFixed(2)}</dd></div>}\n                         </CardContent>\n                         {/* Display log output if available (e.g., on failure) */}\n                          {backtestResults.logOutput && (\n                            <CardFooter>\n                                <details className=\"w-full\">\n                                     <summary className=\"text-xs text-muted-foreground cursor-pointer hover:text-foreground\">View Backtest Log</summary>\n                                     <ScrollArea className=\"mt-2 h-32 w-full rounded-md border bg-muted/50 p-2\">\n                                         <pre className=\"text-xs whitespace-pre-wrap break-words\">\n                                             <code>{backtestResults.logOutput}</code>\n                                         </pre>\n                                     </ScrollArea>\n                                </details>\n                            </CardFooter>\n                         )}\n                     </Card>\n\n                     {/* AI Summary Section */}\n                     <Card>\n                         <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                             <div>\n                                <CardTitle>AI Summary</CardTitle>\n                                <CardDescription>AI-powered interpretation of the results.</CardDescription>\n                             </div>\n                             <Button\n                                  size=\"sm\"\n                                  onClick={handleGenerateSummary}\n                                  disabled={isState(backtestState, BacktestState.SUMMARIZING)}\n                                >\n                                  {isState(backtestState, BacktestState.SUMMARIZING) ? (\n                                      <>\n                                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Generating...\n                                      </>\n                                  ) : (\n                                     <>\n                                          <MessageSquareText className=\"mr-2 h-4 w-4\" /> Generate Summary\n                                     </>\n                                  )}\n                              </Button>\n                         </CardHeader>\n                         <CardContent>\n                              {/* Show error specific to summary generation */}\n                             {error && isState(backtestState, BacktestState.COMPLETE) && ( // Only show summary error here if results are loaded but summary failed\n                                  <p className=\"text-sm text-destructive flex items-center\">\n                                      <AlertTriangle className=\"mr-1 h-4 w-4\" /> {error}\n                                  </p>\n                              )}\n                             {!error && aiSummary && ( // Show summary if no error for summary and it exists\n                                 <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">{aiSummary}</p>\n                             )}\n                             {!error && !aiSummary && !isState(backtestState, BacktestState.SUMMARIZING) && ( // Prompt to generate if no error and no summary\n                                 <p className=\"text-sm text-muted-foreground\">Click \"Generate Summary\" for an AI interpretation.</p>\n                              )}\n                              {isState(backtestState, BacktestState.SUMMARIZING) && ( // Show loading state while summarizing\n                                 <div className=\"flex items-center text-muted-foreground\">\n                                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                      <span>Generating AI summary...</span>\n                                  </div>\n                              )}\n                         </CardContent>\n                     </Card>\n\n                     {/* Advanced Visualizations */}\n                    <AdvancedVisualizations\n                        trades={backtestResults.trades || []}\n                        isLoading={isState(backtestState, BacktestState.FETCHING)}\n                        equityCurve={candlestickData} // Pass transformed data\n                     />\n\n                 </div>\n            );\n         }\n\n         // Default: Show prompt or initial state message\n         return (\n            <div className=\"text-center text-muted-foreground py-10\">\n                {isInitialDataLoading\n                    ? 'Loading initial data...'\n                    : 'Select a strategy and parameters, then click \"Run Backtest\".'\n                }\n            </div>\n        );\n    };\n\n\n    return (\n        <div className=\"space-y-6\">\n            <Card>\n                <CardHeader>\n                    <CardTitle>Run Backtest</CardTitle>\n                    <CardDescription>\n                        Select a strategy, asset, and timeframe to simulate its performance over historical data.\n                    </CardDescription>\n                </CardHeader>\n                <CardContent>\n                    {isInitialDataLoading ? (\n                         <div className=\"flex justify-center items-center py-10\">\n                            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n                            <span className=\"ml-2 text-muted-foreground\">Loading configuration...</span>\n                         </div>\n                     ) : error && strategies.length === 0 && assets.length === 0 ? ( // Show error only if initial data failed to load completely\n                        <div className=\"flex flex-col items-center justify-center py-10 text-destructive\">\n                            <AlertTriangle className=\"h-8 w-8 mb-2\" />\n                            <p>{error}</p>\n                            <Button onClick={() => window.location.reload()} variant=\"outline\" className=\"mt-4\">Retry</Button>\n                        </div>\n                     ) : (\n                        renderForm() // Render the form once data is loaded or if there's no critical error\n                    )}\n                </CardContent>\n            </Card>\n\n            <Card>\n                 <CardHeader>\n                     <CardTitle>Backtest Results: {backtestResults ? selectedStrategyName : 'Not Run'}</CardTitle>\n                     <CardDescription>\n                         {backtestState === BacktestState.IDLE && 'Results will appear here after running a backtest.'}\n                         {backtestState === BacktestState.QUEUING && 'Waiting for backtest job to start...'}\n                         {backtestState === BacktestState.RUNNING && `Backtest job ${jobId ? jobId.substring(0,8) + '...' : ''} is running. Polling for completion...`}\n                         {backtestState === BacktestState.FETCHING && 'Fetching completed backtest results...'}\n                          {backtestState === BacktestState.SUMMARIZING && 'Generating AI summary...'}\n                         {backtestState === BacktestState.COMPLETE && backtestResults && `Showing results for ${selectedStrategyName} on ${backtestResults.summaryMetrics.symbol || 'asset'}.`}\n                         {backtestState === BacktestState.ERROR && error && `An error occurred: ${error}`}\n                         {backtestState === BacktestState.ERROR && !error && 'An unknown error occurred during the backtest process.'}\n                     </CardDescription>\n                 </CardHeader>\n                 <CardContent>\n                     {renderResults()}\n                 </CardContent>\n            </Card>\n\n            {/* Add animation utility if not already present */}\n            <style jsx global>{`\n            @keyframes fadeIn {\n                from { opacity: 0; transform: translateY(-10px); }\n                to { opacity: 1; transform: translateY(0); }\n            }\n            .animate-fade-in {\n                animation: fadeIn 0.5s ease-out forwards;\n            }\n            `}</style>\n            {/* Add ScrollArea style if needed */}\n            <style jsx global>{`\n             .scroll-area-with-scrollbar {\n                /* Add specific styles if needed, e.g., max-height */\n              }\n            `}</style>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}