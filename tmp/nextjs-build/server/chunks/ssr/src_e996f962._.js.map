{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/chart.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\" // Keep this as the main import\n// REMOVED: import { Candlestick as RechartsCandlestick } from \"recharts\" // This was incorrect\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {/* Handle array value for Candlestick */}\n                          {Array.isArray(item.value) ? `O: ${item.value[0]} H: ${item.value[1]} L: ${item.value[2]} C: ${item.value[3]}` : item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n  // Expose RechartsPrimitive.Candlestick directly if it's used as a component tag\n  // This assumes Candlestick is a direct export or part of the RechartsPrimitive namespace.\n  // If it's a component, it needs to be capitalized.\n  RechartsPrimitive, // Export the whole namespace\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/app/monitoring/_components/performance-chart.tsx"],"sourcesContent":["'use client';\n\nimport { TrendingUp } from \"lucide-react\";\nimport { CartesianGrid, Line, LineChart as RechartsLineChart, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\"; // Import ResponsiveContainer\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartConfig // Import ChartConfig type\n} from \"@/components/ui/chart\";\nimport type { PerformanceDataPoint } from '@/services/monitoring-service'; // Import type\n\n\ninterface PerformanceChartProps {\n  data: PerformanceDataPoint[]; // Use the imported type\n  config?: ChartConfig; // Optional config override\n  dataKeyY?: string; // Optional: Specify which key holds the Y value (e.g., 'portfolioValue' or 'value')\n  yAxisLabel?: string; // Optional: Label for the Y axis\n}\n\nconst defaultChartConfig = {\n  value: { // Default key for generic usage\n    label: \"Value ($)\",\n    color: \"hsl(var(--chart-1))\", // Use primary color from theme\n  },\n  portfolioValue: {\n    label: \"Portfolio Value ($)\",\n    color: \"hsl(var(--chart-1))\", // Use primary color from theme\n  },\n  profit: {\n    label: \"Cumulative Profit ($)\",\n    color: \"hsl(var(--chart-2))\", // Use accent color from theme\n  },\n} satisfies ChartConfig\n\n\nexport function PerformanceChart({\n    data,\n    config: configProp,\n    dataKeyY = 'portfolioValue', // Default to portfolioValue for monitoring page\n    yAxisLabel\n}: PerformanceChartProps) {\n\n   const chartConfig = configProp || defaultChartConfig;\n   const activeDataKeyY = dataKeyY as keyof PerformanceDataPoint; // Type assertion\n\n   // Ensure the active data key exists in the config, default if not\n    const activeConfig = chartConfig[dataKeyY as keyof typeof chartConfig] || chartConfig['value'];\n    const dynamicLabel = String(yAxisLabel || activeConfig?.label || \"Value ($)\");\n\n   // Find min/max for dynamic Y-axis domains with padding\n    const values = data.map(d => Number(d[activeDataKeyY]));\n    const minValue = Math.min(...values);\n    const maxValue = Math.max(...values);\n    const valuePadding = (maxValue - minValue) * 0.1 || 1000; // Add 10% padding or 1000\n\n    // Check if 'profit' key exists and calculate its domain if it does\n    const hasProfitData = data.length > 0 && data[0].hasOwnProperty('profit');\n    let minProfit = 0, maxProfit = 0, profitPadding = 0;\n    if (hasProfitData) {\n        const profits = data.map(d => d.profit);\n        minProfit = Math.min(...profits);\n        maxProfit = Math.max(...profits);\n        profitPadding = (maxProfit - minProfit) * 0.1 || 100;\n    }\n\n  return (\n     // Use ChartContainer for consistent styling and context if needed elsewhere\n     <ChartContainer config={chartConfig} className=\"aspect-auto h-[300px] w-full\">\n      {data.length > 0 ? (\n          // ResponsiveContainer ensures the chart fills its parent\n          // Removed ResponsiveContainer wrapper as ChartContainer includes it\n          <RechartsLineChart\n            accessibilityLayer\n            data={data}\n            margin={{\n              left: 12,\n              right: hasProfitData ? 12 : 12, // Adjust right margin if profit axis is present\n              top: 12,\n              bottom: 12,\n            }}\n          >\n            <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"date\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => {\n                 try {\n                    const date = new Date(value);\n                     if (isNaN(date.getTime())) return value;\n                     // Use shorter format for potentially more data points in backtest\n                     return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: '2-digit' });\n                 } catch (error) {\n                     return value;\n                 }\n              }}\n               interval=\"preserveStartEnd\"\n               minTickGap={50} // Increase gap for potentially denser data\n            />\n            <YAxis\n                yAxisId=\"left\"\n                tickLine={false}\n                axisLine={false}\n                tickMargin={8}\n                tickFormatter={(value) => `$${(value / 1000).toFixed(value < 10000 ? 1 : 0)}k`} // More dynamic formatting\n                domain={[Math.max(0, minValue - valuePadding), maxValue + valuePadding]} // Dynamic domain with padding, floor at 0\n                // label={{ value: dynamicLabel, angle: -90, position: 'insideLeft', style: { textAnchor: 'middle', fill: 'hsl(var(--muted-foreground))' }, dy: -10 }} // Optional Y Axis Label\n              />\n              {/* Conditionally render Profit axis only if data exists */}\n              {hasProfitData && (\n                  <YAxis\n                    yAxisId=\"right\"\n                    orientation=\"right\"\n                    tickLine={false}\n                    axisLine={false}\n                    tickMargin={8}\n                    tickFormatter={(value) => `$${value.toLocaleString()}`}\n                    domain={[minProfit - profitPadding, maxProfit + profitPadding]}\n                  />\n              )}\n            <ChartTooltip\n              cursor={true}\n              content={<ChartTooltipContent indicator=\"dot\" />} // Removed hideLabel, let it show date\n            />\n            <Line\n              dataKey={dataKeyY}\n              type=\"monotone\"\n              stroke={`var(--color-${dataKeyY})`} // Use dynamic color from config\n              strokeWidth={2}\n              dot={false}\n              yAxisId=\"left\"\n              name={dynamicLabel} // Use the dynamic label for the tooltip name\n            />\n             {/* Conditionally render Profit line */}\n             {hasProfitData && chartConfig.profit && (\n                 <Line\n                    dataKey=\"profit\"\n                    type=\"monotone\"\n                    stroke=\"var(--color-profit)\"\n                    strokeWidth={2}\n                    dot={false}\n                    yAxisId=\"right\"\n                    name={chartConfig.profit.label as string || \"Cumulative Profit ($)\"}\n                  />\n             )}\n          </RechartsLineChart>\n       ) : (\n           <div className=\"flex h-full w-full items-center justify-center text-muted-foreground\">\n               No performance data available.\n           </div>\n       )}\n    </ChartContainer>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 591, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,0KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,8OAAC,0KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,8OAAC;;;;;0BACD,8OAAC,0KAAA,CAAA,SAA0B;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,8OAAC,0KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,0KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;AAGnD,UAAU,WAAW,GAAG,0KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 659, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 701, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/app/monitoring/_components/activity-log.tsx"],"sourcesContent":["import { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport type { LogEntry } from '@/services/monitoring-service'; // Import type\n\ninterface ActivityLogProps {\n  logs: LogEntry[];\n  compact?: boolean;\n}\n\nexport function ActivityLog({ logs, compact = false }: ActivityLogProps) {\n\n   const getTypeBadgeVariant = (type: LogEntry['type']) => {\n    switch (type) {\n      case 'Trade':\n        return 'default'; // Primary (Blue)\n      case 'Signal':\n        return 'secondary'; // Gray\n      case 'System':\n        return 'outline'; // Outline\n       case 'Error':\n         return 'destructive'; // Red\n      default:\n        return 'secondary';\n    }\n  };\n\n   const formatTimestamp = (timestamp: string) => {\n     try {\n        // Attempt to show time only, assuming logs are recent\n        const date = new Date(timestamp);\n        // Check if the date is valid before formatting\n        if (isNaN(date.getTime())) {\n             throw new Error(\"Invalid Date\");\n        }\n        return date.toLocaleTimeString('en-US', {\n         hour: '2-digit',\n         minute: '2-digit',\n         second: '2-digit',\n         hour12: false, // Use 24-hour format for clarity\n       });\n     } catch (error) {\n       // Fallback for invalid timestamps or if formatting fails\n       return \"??:??:??\";\n     }\n   }\n\n  return (\n    <ScrollArea className={compact ? \"h-[250px] w-full rounded-md border p-2\" : \"h-[400px] w-full rounded-md border p-4\"}>\n      <div className={compact ? \"space-y-2\" : \"space-y-4\"}>\n         {logs.length === 0 && (\n             <p className=\"text-center text-muted-foreground py-4\">No recent activity.</p>\n         )}\n        {logs.map((log, index) => (\n          <div key={index} className={compact ? \"flex items-start space-x-2\" : \"flex items-start space-x-3\"}>\n             <span className={compact ? \"text-[10px] text-muted-foreground w-12 shrink-0 pt-0.5 tabular-nums\" : \"text-xs text-muted-foreground w-16 shrink-0 pt-0.5 tabular-nums\"}>\n                {formatTimestamp(log.timestamp)}\n             </span>\n            <div className=\"flex-1 space-y-1\">\n                 <div className=\"flex items-center space-x-2 flex-wrap\"> {/* Allow wrapping */}\n                     <Badge variant={getTypeBadgeVariant(log.type)} className={compact ? \"text-[10px] shrink-0 px-1 py-0\" : \"text-xs shrink-0\"}> {/* Prevent badge shrinking */}\n                        {log.type}\n                    </Badge>\n                    {log.strategy && log.strategy !== 'System' && !compact && (\n                       <span className=\"text-xs font-medium text-muted-foreground truncate\"> {/* Truncate long names */}\n                         ({log.strategy})\n                       </span>\n                    )}\n                 </div>\n               <p className={cn(\n                   compact ? \"text-xs break-words line-clamp-1\" : \"text-sm break-words\", // Allow long messages to wrap\n                   log.type === 'Error' ? 'text-destructive' : 'text-foreground'\n               )}>\n                   {log.message}\n               </p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </ScrollArea>\n  );\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAQO,SAAS,YAAY,EAAE,IAAI,EAAE,UAAU,KAAK,EAAoB;IAEpE,MAAM,sBAAsB,CAAC;QAC5B,OAAQ;YACN,KAAK;gBACH,OAAO,WAAW,iBAAiB;YACrC,KAAK;gBACH,OAAO,aAAa,OAAO;YAC7B,KAAK;gBACH,OAAO,WAAW,UAAU;YAC7B,KAAK;gBACH,OAAO,eAAe,MAAM;YAC/B;gBACE,OAAO;QACX;IACF;IAEC,MAAM,kBAAkB,CAAC;QACvB,IAAI;YACD,sDAAsD;YACtD,MAAM,OAAO,IAAI,KAAK;YACtB,+CAA+C;YAC/C,IAAI,MAAM,KAAK,OAAO,KAAK;gBACtB,MAAM,IAAI,MAAM;YACrB;YACA,OAAO,KAAK,kBAAkB,CAAC,SAAS;gBACvC,MAAM;gBACN,QAAQ;gBACR,QAAQ;gBACR,QAAQ;YACV;QACF,EAAE,OAAO,OAAO;YACd,yDAAyD;YACzD,OAAO;QACT;IACF;IAED,qBACE,8OAAC,0IAAA,CAAA,aAAU;QAAC,WAAW,UAAU,2CAA2C;kBAC1E,cAAA,8OAAC;YAAI,WAAW,UAAU,cAAc;;gBACpC,KAAK,MAAM,KAAK,mBACb,8OAAC;oBAAE,WAAU;8BAAyC;;;;;;gBAE1D,KAAK,GAAG,CAAC,CAAC,KAAK,sBACd,8OAAC;wBAAgB,WAAW,UAAU,+BAA+B;;0CAClE,8OAAC;gCAAK,WAAW,UAAU,wEAAwE;0CAC/F,gBAAgB,IAAI,SAAS;;;;;;0CAElC,8OAAC;gCAAI,WAAU;;kDACV,8OAAC;wCAAI,WAAU;;4CAAwC;0DACnD,8OAAC,iIAAA,CAAA,QAAK;gDAAC,SAAS,oBAAoB,IAAI,IAAI;gDAAG,WAAW,UAAU,mCAAmC;;oDAAoB;oDACvH,IAAI,IAAI;;;;;;;4CAEZ,IAAI,QAAQ,IAAI,IAAI,QAAQ,KAAK,YAAY,CAAC,yBAC5C,8OAAC;gDAAK,WAAU;;oDAAqD;oDAA4B;oDAC7F,IAAI,QAAQ;oDAAC;;;;;;;;;;;;;kDAIzB,8OAAC;wCAAE,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACX,UAAU,qCAAqC,uBAC/C,IAAI,IAAI,KAAK,UAAU,qBAAqB;kDAE3C,IAAI,OAAO;;;;;;;;;;;;;uBAnBX;;;;;;;;;;;;;;;;AA2BpB","debugId":null}},
    {"offset": {"line": 846, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/app/monitoring/_components/agent-feed.tsx"],"sourcesContent":["// src/app/monitoring/_components/agent-feed.tsx\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Loader2, AlertTriangle, CheckCircle2 } from \"lucide-react\";\nimport { cn } from '@/lib/utils';\n\n// Define the structure of an agent message\ninterface AgentMessage {\n  id: string;\n  timestamp: string;\n  agentName: string;\n  agentType: string;\n  message: string;\n  sentiment: 'positive' | 'negative' | 'neutral';\n  relatedAssets?: string[];\n  concernLevel?: 'low' | 'medium' | 'high';\n}\n\n// Mock data for agent feed\nconst mockAgentFeed: AgentMessage[] = [\n  {\n    id: 'msg-1',\n    timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(), // 5 minutes ago\n    agentName: 'Research Agent',\n    agentType: 'Research Agent',\n    message: 'Analysis of EUR/USD shows bullish momentum with strong support at 1.0750. Recent economic data from the EU suggests continued growth.',\n    sentiment: 'positive',\n    relatedAssets: ['EUR/USD'],\n    concernLevel: 'low',\n  },\n  {\n    id: 'msg-2',\n    timestamp: new Date(Date.now() - 1000 * 60 * 10).toISOString(), // 10 minutes ago\n    agentName: 'Risk Agent',\n    agentType: 'Risk Agent',\n    message: 'Portfolio exposure to tech sector exceeds recommended threshold (25%). Consider rebalancing to reduce concentration risk.',\n    sentiment: 'negative',\n    concernLevel: 'medium',\n  },\n  {\n    id: 'msg-3',\n    timestamp: new Date(Date.now() - 1000 * 60 * 15).toISOString(), // 15 minutes ago\n    agentName: 'Portfolio Agent',\n    agentType: 'Portfolio Agent',\n    message: 'Monthly rebalancing completed. Adjusted allocations to maintain target risk profile. Performance is within expected parameters.',\n    sentiment: 'neutral',\n    concernLevel: 'low',\n  },\n  {\n    id: 'msg-4',\n    timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // 30 minutes ago\n    agentName: 'Execution Agent',\n    agentType: 'Execution Agent',\n    message: 'Executed BTC/USD long position based on signals from Research and Portfolio agents. Entry at $62,450 with 2% risk allocation.',\n    sentiment: 'positive',\n    relatedAssets: ['BTC/USD'],\n    concernLevel: 'low',\n  },\n  {\n    id: 'msg-5',\n    timestamp: new Date(Date.now() - 1000 * 60 * 45).toISOString(), // 45 minutes ago\n    agentName: 'Research Agent',\n    agentType: 'Research Agent',\n    message: 'URGENT: Unexpected volatility in AAPL following earnings report. Recommend reducing position size until market stabilizes.',\n    sentiment: 'negative',\n    relatedAssets: ['AAPL'],\n    concernLevel: 'high',\n  },\n];\n\n// Function to fetch agent feed data\nconst fetchAgentFeed = async (): Promise<AgentMessage[]> => {\n  // In a real implementation, this would be an API call\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return [...mockAgentFeed];\n};\n\nexport function AgentFeed() {\n  const [messages, setMessages] = useState<AgentMessage[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadAgentFeed = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const feed = await fetchAgentFeed();\n        setMessages(feed);\n      } catch (err) {\n        console.error('Failed to fetch agent feed:', err);\n        setError('Could not load agent feed data. Please try again later.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadAgentFeed();\n    \n    // Set up polling for updates every 30 seconds\n    const intervalId = setInterval(loadAgentFeed, 30000);\n    \n    return () => clearInterval(intervalId);\n  }, []);\n\n  // Format timestamp to a readable format\n  const formatTimestamp = (timestamp: string): string => {\n    const date = new Date(timestamp);\n    return new Intl.DateTimeFormat('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    }).format(date);\n  };\n\n  // Get appropriate color for sentiment\n  const getSentimentColor = (sentiment: AgentMessage['sentiment'], concernLevel?: AgentMessage['concernLevel']): string => {\n    if (sentiment === 'negative' || concernLevel === 'high') return 'text-red-500';\n    if (sentiment === 'positive') return 'text-green-500';\n    return 'text-gray-500';\n  };\n\n  // Get icon for message based on sentiment and concern level\n  const getMessageIcon = (message: AgentMessage) => {\n    if (message.sentiment === 'negative' || message.concernLevel === 'high') {\n      return <AlertTriangle className=\"h-4 w-4 text-red-500 flex-shrink-0\" />;\n    }\n    if (message.sentiment === 'positive') {\n      return <CheckCircle2 className=\"h-4 w-4 text-green-500 flex-shrink-0\" />;\n    }\n    return null;\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Agent Feed</CardTitle>\n        <CardDescription>\n          Real-time insights and decisions from AI agents\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"flex justify-center items-center py-8\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            <span className=\"ml-2 text-muted-foreground\">Loading agent feed...</span>\n          </div>\n        ) : error ? (\n          <div className=\"flex items-center text-destructive py-4\">\n            <AlertTriangle className=\"mr-2 h-4 w-4\" />\n            <p>{error}</p>\n          </div>\n        ) : (\n          <ScrollArea className=\"h-[400px] pr-4\">\n            <div className=\"space-y-4\">\n              {messages.map((message) => (\n                <div key={message.id} className=\"border rounded-lg p-3 relative\">\n                  <div className=\"flex justify-between items-start mb-1\">\n                    <div className=\"font-medium\">{message.agentName}</div>\n                    <div className=\"text-xs text-muted-foreground\">{formatTimestamp(message.timestamp)}</div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    {getMessageIcon(message)}\n                    <p className={cn(\n                      \"text-sm\",\n                      getSentimentColor(message.sentiment, message.concernLevel)\n                    )}>\n                      {message.message}\n                    </p>\n                  </div>\n                  {message.relatedAssets && message.relatedAssets.length > 0 && (\n                    <div className=\"mt-2 flex flex-wrap gap-1\">\n                      {message.relatedAssets.map(asset => (\n                        <span key={asset} className=\"text-xs bg-muted px-2 py-1 rounded-full\">\n                          {asset}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n                  {message.concernLevel === 'high' && (\n                    <div className=\"absolute top-0 right-0 w-2 h-2 bg-red-500 rounded-full mr-2 mt-2\"></div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </ScrollArea>\n        )}\n      </CardContent>\n    </Card>\n  );\n}"],"names":[],"mappings":"AAAA,gDAAgD;;;;;AAGhD;AACA;AACA;AACA;AAAA;AAAA;AACA;AANA;;;;;;;AAoBA,2BAA2B;AAC3B,MAAM,gBAAgC;IACpC;QACE,IAAI;QACJ,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,GAAG,WAAW;QAC3D,WAAW;QACX,WAAW;QACX,SAAS;QACT,WAAW;QACX,eAAe;YAAC;SAAU;QAC1B,cAAc;IAChB;IACA;QACE,IAAI;QACJ,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,IAAI,WAAW;QAC5D,WAAW;QACX,WAAW;QACX,SAAS;QACT,WAAW;QACX,cAAc;IAChB;IACA;QACE,IAAI;QACJ,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,IAAI,WAAW;QAC5D,WAAW;QACX,WAAW;QACX,SAAS;QACT,WAAW;QACX,cAAc;IAChB;IACA;QACE,IAAI;QACJ,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,IAAI,WAAW;QAC5D,WAAW;QACX,WAAW;QACX,SAAS;QACT,WAAW;QACX,eAAe;YAAC;SAAU;QAC1B,cAAc;IAChB;IACA;QACE,IAAI;QACJ,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,IAAI,WAAW;QAC5D,WAAW;QACX,WAAW;QACX,SAAS;QACT,WAAW;QACX,eAAe;YAAC;SAAO;QACvB,cAAc;IAChB;CACD;AAED,oCAAoC;AACpC,MAAM,iBAAiB;IACrB,sDAAsD;IACtD,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IACjD,OAAO;WAAI;KAAc;AAC3B;AAEO,SAAS;IACd,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAkB,EAAE;IAC3D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,gBAAgB;YACpB,aAAa;YACb,SAAS;YACT,IAAI;gBACF,MAAM,OAAO,MAAM;gBACnB,YAAY;YACd,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,+BAA+B;gBAC7C,SAAS;YACX,SAAU;gBACR,aAAa;YACf;QACF;QAEA;QAEA,8CAA8C;QAC9C,MAAM,aAAa,YAAY,eAAe;QAE9C,OAAO,IAAM,cAAc;IAC7B,GAAG,EAAE;IAEL,wCAAwC;IACxC,MAAM,kBAAkB,CAAC;QACvB,MAAM,OAAO,IAAI,KAAK;QACtB,OAAO,IAAI,KAAK,cAAc,CAAC,SAAS;YACtC,MAAM;YACN,QAAQ;YACR,QAAQ;QACV,GAAG,MAAM,CAAC;IACZ;IAEA,sCAAsC;IACtC,MAAM,oBAAoB,CAAC,WAAsC;QAC/D,IAAI,cAAc,cAAc,iBAAiB,QAAQ,OAAO;QAChE,IAAI,cAAc,YAAY,OAAO;QACrC,OAAO;IACT;IAEA,4DAA4D;IAC5D,MAAM,iBAAiB,CAAC;QACtB,IAAI,QAAQ,SAAS,KAAK,cAAc,QAAQ,YAAY,KAAK,QAAQ;YACvE,qBAAO,8OAAC,wNAAA,CAAA,gBAAa;gBAAC,WAAU;;;;;;QAClC;QACA,IAAI,QAAQ,SAAS,KAAK,YAAY;YACpC,qBAAO,8OAAC,qNAAA,CAAA,eAAY;gBAAC,WAAU;;;;;;QACjC;QACA,OAAO;IACT;IAEA,qBACE,8OAAC,gIAAA,CAAA,OAAI;;0BACH,8OAAC,gIAAA,CAAA,aAAU;;kCACT,8OAAC,gIAAA,CAAA,YAAS;kCAAC;;;;;;kCACX,8OAAC,gIAAA,CAAA,kBAAe;kCAAC;;;;;;;;;;;;0BAInB,8OAAC,gIAAA,CAAA,cAAW;0BACT,0BACC,8OAAC;oBAAI,WAAU;;sCACb,8OAAC,iNAAA,CAAA,UAAO;4BAAC,WAAU;;;;;;sCACnB,8OAAC;4BAAK,WAAU;sCAA6B;;;;;;;;;;;2BAE7C,sBACF,8OAAC;oBAAI,WAAU;;sCACb,8OAAC,wNAAA,CAAA,gBAAa;4BAAC,WAAU;;;;;;sCACzB,8OAAC;sCAAG;;;;;;;;;;;yCAGN,8OAAC,0IAAA,CAAA,aAAU;oBAAC,WAAU;8BACpB,cAAA,8OAAC;wBAAI,WAAU;kCACZ,SAAS,GAAG,CAAC,CAAC,wBACb,8OAAC;gCAAqB,WAAU;;kDAC9B,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;gDAAI,WAAU;0DAAe,QAAQ,SAAS;;;;;;0DAC/C,8OAAC;gDAAI,WAAU;0DAAiC,gBAAgB,QAAQ,SAAS;;;;;;;;;;;;kDAEnF,8OAAC;wCAAI,WAAU;;4CACZ,eAAe;0DAChB,8OAAC;gDAAE,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACb,WACA,kBAAkB,QAAQ,SAAS,EAAE,QAAQ,YAAY;0DAExD,QAAQ,OAAO;;;;;;;;;;;;oCAGnB,QAAQ,aAAa,IAAI,QAAQ,aAAa,CAAC,MAAM,GAAG,mBACvD,8OAAC;wCAAI,WAAU;kDACZ,QAAQ,aAAa,CAAC,GAAG,CAAC,CAAA,sBACzB,8OAAC;gDAAiB,WAAU;0DACzB;+CADQ;;;;;;;;;;oCAMhB,QAAQ,YAAY,KAAK,wBACxB,8OAAC;wCAAI,WAAU;;;;;;;+BAxBT,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCpC","debugId":null}},
    {"offset": {"line": 1166, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,6JACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBACnC,8OAAC;QACC,KAAK;QACL,MAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG;AAEpB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,gDAAgD;QAC7D,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1230, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/services/monitoring-service.ts"],"sourcesContent":["// src/services/monitoring-service.ts\n\n/**\n * @fileOverview Service functions for fetching monitoring data.\n * Replace mock implementations with actual data fetching logic (e.g., from a database or API).\n */\n\nexport interface PerformanceDataPoint {\n  date: string; // Consider using Date objects if more manipulation is needed\n  portfolioValue: number;\n  profit: number; // Cumulative profit up to this point\n}\n\nexport interface LogEntry {\n  timestamp: string; // Consider using Date objects\n  type: 'Trade' | 'Signal' | 'System' | 'Error';\n  message: string;\n  strategy?: string; // Strategy ID or name, 'System' for non-strategy logs\n}\n\nexport interface KeyMetrics {\n    totalPnL: number;\n    todayPnL: number;\n    activeStrategies: number;\n    totalTradesToday: number;\n    winRateLast7d: number; // Percentage\n    maxDrawdown: number; // Percentage\n}\n\n// Define a detailed Trade type\nexport interface Trade {\n  id: string; // Unique ID for the trade\n  timestamp: string; // Execution timestamp\n  strategyId: string; // ID of the strategy that executed the trade\n  strategyName?: string; // Optional: Name of the strategy\n  symbol: string;\n  tradeType: 'BUY' | 'SELL';\n  tradingMethod: 'Spot' | 'Futures' | 'Options'; // Based on allowedTradingMethods\n  assetType: 'Stock' | 'Crypto' | 'Forex' | 'ETF'; // Based on allowedAssetTypes\n  category?: string; // Optional category/sector\n  lotSize: number; // Quantity or contracts\n  entryPrice: number;\n  exitPrice?: number; // Nullable if position is still open\n  pnl?: number; // Nullable if position is still open\n  brokerName?: string; // Name of the broker\n  pipsPnL?: number; // P&L in pips\n  leverage?: number; // Leverage used for the trade\n  isWinning?: boolean; // Whether the trade is currently winning\n  // Add other relevant fields like fees, slippage, duration, etc.\n}\n\n// API base URL - use /api prefix to rely on Next.js rewrites\nconst API_BASE_URL = '/api';\n\n// --- Service Functions ---\n\n/**\n * Fetches portfolio performance history.\n * @param timeRange The time range for the data (e.g., '1D', '7D', '1M', 'YTD'). Defaults to '1M'.\n * @returns A promise that resolves to an array of PerformanceDataPoint objects.\n */\nexport async function getPortfolioHistory(timeRange: string = '1M'): Promise<PerformanceDataPoint[]> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/monitoring/performance?time_range=${timeRange}`);\n    if (!response.ok) {\n      throw new Error(`Error fetching portfolio history: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Failed to fetch portfolio history:', error);\n    throw error;\n  }\n}\n\n/**\n * Fetches recent activity logs.\n * @param limit The maximum number of log entries to return. Defaults to 50.\n * @returns A promise that resolves to an array of LogEntry objects.\n */\nexport async function getActivityLogs(limit: number = 50): Promise<LogEntry[]> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/monitoring/logs?limit=${limit}`);\n    if (!response.ok) {\n      throw new Error(`Error fetching activity logs: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Failed to fetch activity logs:', error);\n    throw error;\n  }\n}\n\n/**\n * Fetches key performance metrics.\n * @returns A promise that resolves to a KeyMetrics object.\n */\nexport async function getKeyMetrics(): Promise<KeyMetrics> {\n  console.log(\"Fetching key metrics...\");\n  \n  try {\n    // Fetch key metrics from the API\n    const response = await fetch(`${API_BASE_URL}/monitoring/metrics`);\n    \n    if (!response.ok) {\n      throw new Error(`Error fetching key metrics: ${response.statusText}`);\n    }\n    \n    const metrics = await response.json();\n    \n    // If no metrics are returned, calculate them from trade data\n    if (!metrics || Object.keys(metrics).length === 0) {\n      console.log(\"No metrics found in database, calculating from trade data...\");\n      \n      // Get all trades\n      const trades = await getLiveBrokerTrades();\n      const strategiesResponse = await fetch(`${API_BASE_URL}/strategies/`);\n      const strategies: { id: string; name: string; status: string }[] = await strategiesResponse.json();\n      \n      // Calculate metrics\n      const totalPnL = trades.reduce((sum, trade) => sum + (trade.pnl || 0), 0);\n      \n      // Get today's date\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      // Calculate today's PnL\n      const todayPnL = trades\n        .filter(trade => new Date(trade.timestamp) >= today)\n        .reduce((sum, trade) => sum + (trade.pnl || 0), 0);\n      \n      // Count active strategies\n      const activeStrategies = strategies.filter(s => s.status === 'Active').length;\n      \n      // Count today's trades\n      const totalTradesToday = trades.filter(trade => new Date(trade.timestamp) >= today).length;\n      \n      // Calculate win rate for last 7 days\n      const sevenDaysAgo = new Date();\n      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n      \n      const last7DaysTrades = trades.filter(trade => new Date(trade.timestamp) >= sevenDaysAgo);\n      const winningTrades = last7DaysTrades.filter(trade => trade.isWinning).length;\n      const winRateLast7d = last7DaysTrades.length > 0 ? winningTrades / last7DaysTrades.length : 0;\n      \n      // Calculate max drawdown (simplified)\n      const maxDrawdown = 0.05; // Default to 5% if we can't calculate\n      \n      return {\n        totalPnL,\n        todayPnL,\n        activeStrategies,\n        totalTradesToday,\n        winRateLast7d,\n        maxDrawdown\n      };\n    }\n    \n    // Return metrics from the database\n    return {\n      totalPnL: metrics.total_pnl || 0,\n      todayPnL: metrics.today_pnl || 0,\n      activeStrategies: metrics.active_strategies || 0,\n      totalTradesToday: metrics.total_trades_today || 0,\n      winRateLast7d: metrics.win_rate_last_7d || 0,\n      maxDrawdown: metrics.max_drawdown || 0\n    };\n  } catch (error) {\n    console.error('Failed to fetch key metrics:', error);\n    \n    // Return default values if there's an error\n    return {\n      totalPnL: 0,\n      todayPnL: 0,\n      activeStrategies: 0,\n      totalTradesToday: 0,\n      winRateLast7d: 0,\n      maxDrawdown: 0\n    };\n  }\n}\n\n\n// --- Strategy Specific Monitoring ---\n\n/**\n * Fetches the performance history specifically for a given strategy.\n * @param strategyId The ID of the strategy.\n * @param timeRange The time range for the data.\n * @returns A promise resolving to an array of PerformanceDataPoint objects for the strategy.\n */\nexport async function getStrategyPerformance(strategyId: string, timeRange: string = '1M'): Promise<PerformanceDataPoint[]> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/monitoring/strategies/${strategyId}/performance?time_range=${timeRange}`);\n    if (!response.ok) {\n      throw new Error(`Error fetching strategy performance: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Failed to fetch performance for strategy ${strategyId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Fetches the recent trades executed by a specific strategy.\n * @param strategyId The ID of the strategy.\n * @param limit The maximum number of trades to return. Defaults to 100.\n * @param offset The number of trades to skip (for pagination). Defaults to 0.\n * @returns A promise resolving to an object containing the trades and total count.\n */\nexport async function getStrategyTrades(strategyId: string, limit: number = 100, offset: number = 0): Promise<{ trades: Trade[], total: number }> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/monitoring/strategies/${strategyId}/trades?limit=${limit}&offset=${offset}`);\n    if (!response.ok) {\n      throw new Error(`Error fetching strategy trades: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Failed to fetch trades for strategy ${strategyId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Fetches the current open trades from the broker.\n * @param brokerId Optional broker ID to filter trades by broker\n * @returns A promise resolving to an array of Trade objects representing open positions\n */\nexport async function getLiveBrokerTrades(brokerId?: string): Promise<Trade[]> {\n  try {\n    const url = brokerId\n      ? `${API_BASE_URL}/monitoring/broker/trades?broker_id=${brokerId}`\n      : `${API_BASE_URL}/monitoring/broker/trades`;\n    \n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Error fetching live broker trades: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Failed to fetch live broker trades:', error);\n    throw error;\n  }\n}\n\n/**\n * Closes an open trade\n * @param tradeId The ID of the trade to close\n * @returns A promise that resolves to true if the trade was closed successfully\n */\nexport async function closeTrade(tradeId: string): Promise<boolean> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/monitoring/trades/${tradeId}/close`, {\n      method: 'POST',\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error closing trade: ${response.statusText}`);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(`Failed to close trade ${tradeId}:`, error);\n    throw error; // Re-throw to allow handling in the UI\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1392, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/ai/flows/suggest-strategy-config.ts"],"sourcesContent":["// This is an autogenerated file from Firebase Studio.\n\n'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for suggesting optimal configuration options for a trading strategy.\n *\n * The flow takes into account market conditions, risk tolerance, and historical performance data to provide potentially profitable strategies.\n *\n * @module ai/flows/suggest-strategy-config\n *\n * @interface SuggestStrategyConfigInput - The input type for the suggestStrategyConfig function.\n * @interface SuggestStrategyConfigOutput - The output type for the suggestStrategyConfig function.\n * @function suggestStrategyConfig - A function that triggers the suggestStrategyConfigFlow and returns the suggested configurations.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst SuggestStrategyConfigInputSchema = z.object({\n  marketConditions: z\n    .string()\n    .describe('The current market conditions (e.g., bullish, bearish, volatile).'),\n  riskTolerance:\n    z.enum(['low', 'medium', 'high']).describe('The user’s risk tolerance level.'),\n  historicalPerformanceData: z\n    .string()\n    .describe(\n      'Historical performance data of different trading strategies as a JSON string.'\n    ),\n});\n\nexport type SuggestStrategyConfigInput = z.infer<typeof SuggestStrategyConfigInputSchema>;\n\nconst SuggestStrategyConfigOutputSchema = z.object({\n  strategyName: z.string().describe('The name of the suggested trading strategy.'),\n  configurationOptions: z\n    .record(z.any())\n    .describe('A JSON object containing the optimal configuration options for the strategy.'),\n  expectedReturn: z\n    .number()\n    .describe('The expected return of the suggested strategy, expressed as a percentage.'),\n  riskLevel: z.string().describe('The risk level associated with the suggested strategy.'),\n});\n\nexport type SuggestStrategyConfigOutput = z.infer<typeof SuggestStrategyConfigOutputSchema>;\n\nexport async function suggestStrategyConfig(\n  input: SuggestStrategyConfigInput\n): Promise<SuggestStrategyConfigOutput> {\n  return suggestStrategyConfigFlow(input);\n}\n\nconst suggestStrategyConfigPrompt = ai.definePrompt({\n  name: 'suggestStrategyConfigPrompt',\n  input: {\n    schema: z.object({\n      marketConditions: z\n        .string()\n        .describe('The current market conditions (e.g., bullish, bearish, volatile).'),\n      riskTolerance:\n        z.enum(['low', 'medium', 'high']).describe('The user’s risk tolerance level.'),\n      historicalPerformanceData: z\n        .string()\n        .describe(\n          'Historical performance data of different trading strategies as a JSON string.'\n        ),\n    }),\n  },\n  output: {\n    schema: z.object({\n      strategyName: z.string().describe('The name of the suggested trading strategy.'),\n      configurationOptions: z\n        .record(z.any())\n        .describe('A JSON object containing the optimal configuration options for the strategy.'),\n      expectedReturn: z\n        .number()\n        .describe('The expected return of the suggested strategy, expressed as a percentage.'),\n      riskLevel: z.string().describe('The risk level associated with the suggested strategy.'),\n    }),\n  },\n  prompt: `You are an expert in financial trading strategies.\n\n  Based on the current market conditions: {{{marketConditions}}}, the user's risk tolerance: {{{riskTolerance}}}, and the following historical performance data: {{{historicalPerformanceData}}}, suggest an optimal trading strategy with specific configuration options.\n\n  Return the strategy name, configuration options (as a JSON object), expected return (as a percentage), and risk level. The configuration options should be optimized to maximize return while considering the risk tolerance specified by the user.\n\n  Make sure the configurationOptions are a valid JSON object.`,\n});\n\nconst suggestStrategyConfigFlow = ai.defineFlow<\n  typeof SuggestStrategyConfigInputSchema,\n  typeof SuggestStrategyConfigOutputSchema\n>(\n  {\n    name: 'suggestStrategyConfigFlow',\n    inputSchema: SuggestStrategyConfigInputSchema,\n    outputSchema: SuggestStrategyConfigOutputSchema,\n  },\n  async input => {\n    const {output} = await suggestStrategyConfigPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,sDAAsD;;;;;;IA+ChC","debugId":null}},
    {"offset": {"line": 1405, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/services/strategies-service.ts"],"sourcesContent":["// src/services/strategies-service.ts\n\n/**\n * @fileOverview Service functions for fetching and managing trading strategies.\n * This service connects to the backend API to fetch and manage strategies.\n * The backend is built with FastAPI and uses SQLModel to interact with a SQLite database.\n */\nimport { SuggestStrategyConfigInput, SuggestStrategyConfigOutput } from '@/ai/flows/suggest-strategy-config'; // Ensure flow types are imported\nimport { suggestStrategyConfig as suggestStrategyConfigFlow } from '@/ai/flows/suggest-strategy-config'; // Import the actual flow function\n\nexport interface Strategy {\n  id: string;\n  name: string;\n  description: string;\n  status: 'Active' | 'Inactive' | 'Debugging' | 'Backtesting' | 'Archived'; // Added 'Archived'\n  pnl: number; // Consider fetching PnL dynamically or storing recent PnL\n  winRate: number; // Similarly, fetch/calculate win rate\n  // Add other relevant fields: parameters, associated agent ID, creation date, source (AI-gen/Uploaded), filename etc.\n  source?: 'AI-Generated' | 'Uploaded';\n  fileName?: string; // Store original filename if uploaded\n}\n\n// API base URL - use /api prefix to rely on Next.js rewrites\n\n// API base URL - use /api prefix to rely on Next.js rewrites\nconst API_BASE_URL = '/api';\n\n// Helper function to handle errors\nfunction handleError(error: any): never {\n  console.error('API Error:', error);\n  throw error;\n}\n\n// Helper function to convert backend strategy format to frontend format\nfunction convertBackendStrategy(backendStrategy: any): Strategy {\n  return {\n    id: `strat-${backendStrategy.id}`, // Convert numeric ID to string format with prefix\n    name: backendStrategy.name,\n    description: backendStrategy.description,\n    status: backendStrategy.status as Strategy['status'],\n    pnl: backendStrategy.pnl || 0,\n    winRate: backendStrategy.win_rate || 0,\n    source: backendStrategy.source as Strategy['source'],\n    fileName: backendStrategy.file_name\n  };\n}\n\n// Helper function to convert frontend strategy format to backend format\nfunction convertFrontendStrategy(frontendStrategy: Partial<Strategy>): any {\n  const backendStrategy: Record<string, any> = {\n    name: frontendStrategy.name,\n    description: frontendStrategy.description,\n    status: frontendStrategy.status,\n    source: frontendStrategy.source,\n    file_name: frontendStrategy.fileName,\n    pnl: frontendStrategy.pnl || 0,\n    win_rate: frontendStrategy.winRate || 0\n  };\n\n  // If ID is provided, extract the numeric part\n  if (frontendStrategy.id) {\n    const idMatch = frontendStrategy.id.match(/strat-(\\d+)/);\n    if (idMatch && idMatch[1]) {\n      backendStrategy.id = parseInt(idMatch[1], 10);\n    }\n  }\n\n  return backendStrategy;\n}\n\n\n/**\n * Fetches all strategies from the backend.\n * @param includeArchived Whether to include archived strategies. Defaults to false.\n * @returns A promise that resolves to an array of Strategy objects.\n */\nexport async function getStrategies(includeArchived: boolean = false): Promise<Strategy[]> {\n  console.log(`Fetching strategies (includeArchived: ${includeArchived})...`);\n  \n  try {\n    // Fetch strategies from the file-based API\n    const response = await fetch(`${API_BASE_URL}/file-strategies?include_archived=${includeArchived}`);\n    \n    if (!response.ok) {\n      console.error(`Error fetching strategies: ${response.statusText}`);\n      // Return empty array instead of throwing error\n      return [];\n    }\n    \n    const backendStrategies = await response.json();\n    \n    // Handle empty response\n    if (!backendStrategies || !Array.isArray(backendStrategies)) {\n      console.warn(\"Received invalid strategies data from backend\");\n      return [];\n    }\n    \n    // Convert backend format to frontend format\n    const strategies = backendStrategies.map((backendStrategy: any) => {\n      return {\n        id: backendStrategy.id || `strat-unknown-${Math.random().toString(36).substring(2, 9)}`, // Fallback ID if missing\n        name: backendStrategy.name || \"Unnamed Strategy\",\n        description: backendStrategy.description || \"No description available\",\n        status: (backendStrategy.status as Strategy['status']) || \"Active\",\n        pnl: backendStrategy.pnl || 0,\n        winRate: backendStrategy.win_rate || 0,\n        source: (backendStrategy.source as Strategy['source']) || \"Uploaded\",\n        fileName: backendStrategy.file_name || \"\"\n      };\n    });\n    \n    console.log(\"Fetched strategies:\", strategies.length);\n    return strategies;\n  } catch (error) {\n    console.error(\"Failed to fetch strategies:\", error);\n    // Return empty array instead of throwing error\n    return [];\n  }\n}\n\n/**\n * Fetches a single strategy by ID.\n * @param strategyId The ID of the strategy to fetch.\n * @returns A promise that resolves to the Strategy object or null if not found.\n */\nexport async function getStrategyById(strategyId: string): Promise<Strategy | null> {\n  console.log(`Fetching strategy by ID: ${strategyId}`);\n  \n  try {\n    // Fetch strategy from the file-based API\n    const response = await fetch(`${API_BASE_URL}/file-strategies/${strategyId}`);\n    \n    if (!response.ok) {\n      if (response.status === 404) {\n        console.log(`Strategy ${strategyId} not found.`);\n        return null;\n      }\n      throw new Error(`Error fetching strategy: ${response.statusText}`);\n    }\n    \n    const backendStrategy = await response.json();\n    \n    // Convert backend format to frontend format\n    const strategy: Strategy = {\n      id: backendStrategy.id,\n      name: backendStrategy.name,\n      description: backendStrategy.description,\n      status: backendStrategy.status as Strategy['status'],\n      pnl: backendStrategy.pnl || 0,\n      winRate: backendStrategy.win_rate || 0,\n      source: backendStrategy.source as Strategy['source'],\n      fileName: backendStrategy.file_name\n    };\n    \n    console.log(`Found strategy: ${strategy.name}`);\n    return strategy;\n  } catch (error) {\n    console.error(`Failed to fetch strategy ${strategyId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Fetches the code content for a given strategy ID.\n * In a real system, this would involve fetching the file content from storage\n * based on the strategy's fileName or database record.\n * @param strategyId The ID of the strategy.\n * @returns A promise resolving to the code string, or null if not found/applicable.\n */\nexport async function getStrategyCode(strategyId: string): Promise<string | null> {\n  console.log(`Fetching code for strategy ID: ${strategyId}`);\n  \n  try {\n    // Fetch strategy code from the file-based API\n    const response = await fetch(`${API_BASE_URL}/file-strategies/${strategyId}/code`);\n    \n    if (!response.ok) {\n      if (response.status === 404) {\n        console.log(`Code for strategy ${strategyId} not found.`);\n        return null;\n      }\n      throw new Error(`Error fetching strategy code: ${response.statusText}`);\n    }\n    \n    const result = await response.json();\n    return result.code;\n  } catch (error) {\n    console.error(`Failed to fetch code for strategy ${strategyId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Saves code for a strategy.\n * @param strategyId The ID of the strategy.\n * @param code The code to save.\n * @returns A promise that resolves to true if successful.\n */\nexport async function saveStrategyCode(strategyId: string, code: string): Promise<boolean> {\n  console.log(`Saving code for strategy ID: ${strategyId}`);\n  \n  try {\n    // Extract the numeric ID from the string ID\n    const idMatch = strategyId.match(/strat-(\\d+)/);\n    if (!idMatch || !idMatch[1]) {\n      console.error(`Invalid strategy ID format: ${strategyId}`);\n      return false;\n    }\n    \n    const numericId = idMatch[1];\n    \n    // Save strategy code to the API\n    const response = await fetch(`${API_BASE_URL}/strategies/${numericId}/code`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ code }),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error saving strategy code: ${response.statusText}`);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(`Failed to save code for strategy ${strategyId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Updates a strategy.\n * @param strategyId The ID of the strategy to update.\n * @param updates The updates to apply to the strategy.\n * @returns A promise that resolves to the updated Strategy object.\n */\nexport async function updateStrategy(strategyId: string, updates: Partial<Strategy>): Promise<Strategy> {\n  console.log(`Updating strategy ID: ${strategyId}`, updates);\n  \n  try {\n    // Extract the numeric ID from the string ID\n    const idMatch = strategyId.match(/strat-(\\d+)/);\n    if (!idMatch || !idMatch[1]) {\n      throw new Error(`Invalid strategy ID format: ${strategyId}`);\n    }\n    \n    const numericId = idMatch[1];\n    \n    // Convert frontend format to backend format\n    const backendUpdates = convertFrontendStrategy(updates);\n    \n    // Update strategy via the API\n    const response = await fetch(`${API_BASE_URL}/strategies/${numericId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(backendUpdates),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error updating strategy: ${response.statusText}`);\n    }\n    \n    const backendStrategy = await response.json();\n    \n    // Convert backend format to frontend format\n    return convertBackendStrategy(backendStrategy);\n  } catch (error) {\n    console.error(`Failed to update strategy ${strategyId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Archives a strategy.\n * @param strategyId The ID of the strategy to archive.\n * @returns A promise that resolves to the archived Strategy object.\n */\nexport async function archiveStrategy(strategyId: string): Promise<Strategy> {\n  console.log(`Archiving strategy ID: ${strategyId}`);\n  \n  // Use updateStrategy to set status to 'Archived'\n  return updateStrategy(strategyId, { status: 'Archived' });\n}\n\n/**\n * Permanently deletes a strategy.\n * @param strategyId The ID of the strategy to delete.\n * @returns A promise that resolves to true if successful.\n */\nexport async function deleteStrategyPermanently(strategyId: string): Promise<boolean> {\n  console.log(`Deleting strategy ID: ${strategyId}`);\n  \n  try {\n    // Extract the numeric ID from the string ID\n    const idMatch = strategyId.match(/strat-(\\d+)/);\n    if (!idMatch || !idMatch[1]) {\n      throw new Error(`Invalid strategy ID format: ${strategyId}`);\n    }\n    \n    const numericId = idMatch[1];\n    \n    // Delete strategy via the API\n    const response = await fetch(`${API_BASE_URL}/strategies/${numericId}`, {\n      method: 'DELETE',\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error deleting strategy: ${response.statusText}`);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(`Failed to delete strategy ${strategyId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Creates a new strategy with a file.\n * @param strategy The strategy data.\n * @param file The strategy file.\n * @returns A promise that resolves to the created Strategy object.\n */\nexport async function addStrategyWithFile(strategy: Partial<Strategy>, file?: File): Promise<Strategy> {\n  console.log(`Creating new strategy:`, strategy);\n  \n  try {\n    // Convert frontend format to backend format\n    const backendStrategy = convertFrontendStrategy(strategy);\n    \n    // Create a FormData object to send the file\n    const formData = new FormData();\n    formData.append('strategy_in', JSON.stringify(backendStrategy));\n    \n    if (file) {\n      formData.append('strategy_file', file);\n    }\n    \n    // Create strategy via the API\n    const response = await fetch(`${API_BASE_URL}/strategies/`, {\n      method: 'POST',\n      body: formData,\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error creating strategy: ${response.statusText}`);\n    }\n    \n    const createdStrategy = await response.json();\n    \n    // Convert backend format to frontend format\n    return convertBackendStrategy(createdStrategy);\n  } catch (error) {\n    console.error('Failed to create strategy:', error);\n    throw error;\n  }\n}\n\n/**\n * Suggests a strategy configuration based on user inputs.\n * @param input The input parameters for the suggestion.\n * @returns A promise that resolves to the suggested configuration.\n */\nexport async function suggestStrategyConfig(input: any): Promise<any> {\n  console.log(`Suggesting strategy config:`, input);\n  \n  try {\n    // Use the imported flow function\n    return await suggestStrategyConfigFlow(input);\n  } catch (error) {\n    console.error('Failed to suggest strategy config:', error);\n    throw error;\n  }\n}\n\n/**\n * Generates and tests a strategy from a suggestion.\n * @param suggestion The strategy suggestion.\n * @returns A promise that resolves to the created Strategy object.\n */\nexport async function generateAndTestStrategyFromSuggestion(suggestion: any): Promise<Strategy> {\n  console.log(`Generating strategy from suggestion:`, suggestion);\n  \n  try {\n    // Create a new strategy with the suggested configuration\n    const response = await fetch(`${API_BASE_URL}/strategies/generate`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(suggestion),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error generating strategy: ${response.statusText}`);\n    }\n    \n    const generatedStrategy = await response.json();\n    \n    // Convert backend format to frontend format\n    return convertBackendStrategy(generatedStrategy);\n  } catch (error) {\n    console.error('Failed to generate strategy:', error);\n    throw error;\n  }\n}\n\n/**\n * Schedules automated strategy generation.\n * @param scheduleType The type of schedule (startup, daily, weekly).\n * @param config The configuration for the generation.\n * @returns A promise that resolves to true if successful.\n */\nexport async function scheduleStrategyGeneration(scheduleType: string, config: any): Promise<boolean> {\n  console.log(`Scheduling strategy generation (${scheduleType}):`, config);\n  \n  try {\n    // Schedule strategy generation via the API\n    const response = await fetch(`${API_BASE_URL}/strategies/schedule-generation`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        schedule_type: scheduleType,\n        generation_config: config,\n      }),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error scheduling strategy generation: ${response.statusText}`);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Failed to schedule strategy generation:', error);\n    throw error;\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1729, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1921, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/table.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, children, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n  </tr>\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAEA;AAEA;AAJA;;;;AAMA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;kBAER;;;;;;AAGL,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 2033, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 2065, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/app/monitoring/_components/strategy-trades-table.tsx"],"sourcesContent":["// src/app/monitoring/_components/strategy-trades-table.tsx\n'use client';\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, ArrowRight, Filter, X, Check } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { useState, useEffect } from \"react\";\nimport type { Trade } from '@/services/monitoring-service';\nimport { cn } from '@/lib/utils';\nimport { format } from 'date-fns'; // For formatting timestamps\n\ninterface StrategyTradesTableProps {\n  trades: Trade[];\n  totalTrades: number;\n  page: number;\n  rowsPerPage: number;\n  onPageChange: (newPage: number) => void;\n}\n\ninterface TradeFilters {\n  symbol?: string;\n  tradeType?: 'BUY' | 'SELL' | '';\n  tradingMethod?: string;\n  assetType?: string;\n  isWinning?: boolean | null;\n  dateFrom?: string;\n  dateTo?: string;\n}\n\n// Helper to format currency/numbers, can be moved to utils\nconst formatNumberValue = (value: number | undefined | null, options?: Intl.NumberFormatOptions): string => {\n    if (value === undefined || value === null) return '-';\n    return value.toLocaleString('en-US', options);\n};\n\nconst formatTimestamp = (timestamp: string): string => {\n    try {\n        return format(new Date(timestamp), 'yyyy-MM-dd HH:mm:ss');\n    } catch (error) {\n        return 'Invalid Date';\n    }\n};\n\nexport function StrategyTradesTable({ trades, totalTrades, page, rowsPerPage, onPageChange }: StrategyTradesTableProps) {\n  const [filters, setFilters] = useState<TradeFilters>({});\n  const [filteredTrades, setFilteredTrades] = useState<Trade[]>(trades);\n  const [filteredTotal, setFilteredTotal] = useState<number>(totalTrades);\n  const [showFilters, setShowFilters] = useState(false);\n  \n  // Update filtered trades when trades or filters change\n  useEffect(() => {\n    const filtered = trades.filter(trade => {\n      // Symbol filter\n      if (filters.symbol && !trade.symbol.toLowerCase().includes(filters.symbol.toLowerCase())) {\n        return false;\n      }\n      \n      // Trade type filter\n      if (filters.tradeType && trade.tradeType !== filters.tradeType) {\n        return false;\n      }\n      \n      // Trading method filter\n      if (filters.tradingMethod && trade.tradingMethod !== filters.tradingMethod) {\n        return false;\n      }\n      \n      // Asset type filter\n      if (filters.assetType && trade.assetType !== filters.assetType) {\n        return false;\n      }\n      \n      // Winning/losing filter\n      if (filters.isWinning !== null && filters.isWinning !== undefined &&\n          trade.isWinning !== filters.isWinning) {\n        return false;\n      }\n      \n      // Date range filter\n      if (filters.dateFrom) {\n        const tradeDate = new Date(trade.timestamp);\n        const fromDate = new Date(filters.dateFrom);\n        if (tradeDate < fromDate) {\n          return false;\n        }\n      }\n      \n      if (filters.dateTo) {\n        const tradeDate = new Date(trade.timestamp);\n        const toDate = new Date(filters.dateTo);\n        // Set time to end of day\n        toDate.setHours(23, 59, 59, 999);\n        if (tradeDate > toDate) {\n          return false;\n        }\n      }\n      \n      return true;\n    });\n    \n    setFilteredTrades(filtered);\n    setFilteredTotal(filtered.length);\n  }, [trades, filters]);\n\n  const totalPages = Math.ceil(filteredTotal / rowsPerPage);\n  const startIndex = (page - 1) * rowsPerPage + 1;\n  const endIndex = Math.min(page * rowsPerPage, filteredTotal);\n\n  const getTradeTypeBadge = (type: Trade['tradeType']) => {\n     return type === 'BUY' ? 'default' : 'destructive';\n  };\n\n  const getPnlClass = (pnl: number | undefined | null) => {\n    if (pnl === undefined || pnl === null) return '';\n    return pnl >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400';\n  };\n  \n  const resetFilters = () => {\n    setFilters({});\n    onPageChange(1); // Reset to first page\n  };\n  \n  // Get unique values for filter dropdowns\n  const uniqueSymbols = Array.from(new Set(trades.map(t => t.symbol)));\n  const uniqueTradingMethods = Array.from(new Set(trades.map(t => t.tradingMethod)));\n  const uniqueAssetTypes = Array.from(new Set(trades.map(t => t.assetType)));\n\n  return (\n    <div className=\"space-y-4\">\n        {/* Filters */}\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"text-lg font-medium\">Strategy Trades</h3>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"flex items-center gap-1\"\n          >\n            <Filter className=\"h-4 w-4\" />\n            {showFilters ? \"Hide Filters\" : \"Show Filters\"}\n          </Button>\n        </div>\n        \n        {showFilters && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 p-4 border rounded-md bg-muted/20\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"symbol-filter\">Symbol</Label>\n              <Select\n                value={filters.symbol || \"\"}\n                onValueChange={(value) => setFilters({...filters, symbol: value})}\n              >\n                <SelectTrigger id=\"symbol-filter\">\n                  <SelectValue placeholder=\"All symbols\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All symbols</SelectItem>\n                  {uniqueSymbols.map(symbol => (\n                    <SelectItem key={symbol} value={symbol}>{symbol}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"type-filter\">Trade Type</Label>\n              <Select\n                value={filters.tradeType || \"\"}\n                onValueChange={(value: any) => setFilters({...filters, tradeType: value})}\n              >\n                <SelectTrigger id=\"type-filter\">\n                  <SelectValue placeholder=\"All types\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All types</SelectItem>\n                  <SelectItem value=\"BUY\">BUY</SelectItem>\n                  <SelectItem value=\"SELL\">SELL</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"method-filter\">Trading Method</Label>\n              <Select\n                value={filters.tradingMethod || \"\"}\n                onValueChange={(value) => setFilters({...filters, tradingMethod: value})}\n              >\n                <SelectTrigger id=\"method-filter\">\n                  <SelectValue placeholder=\"All methods\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All methods</SelectItem>\n                  {uniqueTradingMethods.map(method => (\n                    <SelectItem key={method} value={method}>{method}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"asset-filter\">Asset Type</Label>\n              <Select\n                value={filters.assetType || \"\"}\n                onValueChange={(value) => setFilters({...filters, assetType: value})}\n              >\n                <SelectTrigger id=\"asset-filter\">\n                  <SelectValue placeholder=\"All assets\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All assets</SelectItem>\n                  {uniqueAssetTypes.map(type => (\n                    <SelectItem key={type} value={type}>{type}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"date-from\">From Date</Label>\n              <Input\n                id=\"date-from\"\n                type=\"date\"\n                value={filters.dateFrom || \"\"}\n                onChange={(e) => setFilters({...filters, dateFrom: e.target.value})}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"date-to\">To Date</Label>\n              <Input\n                id=\"date-to\"\n                type=\"date\"\n                value={filters.dateTo || \"\"}\n                onChange={(e) => setFilters({...filters, dateTo: e.target.value})}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label className=\"mb-2 block\">Trade Result</Label>\n              <Select\n                value={filters.isWinning === null ? \"\" : filters.isWinning === true ? \"winning\" : \"losing\"}\n                onValueChange={(value) => {\n                  let isWinning = null;\n                  if (value === \"winning\") isWinning = true;\n                  if (value === \"losing\") isWinning = false;\n                  setFilters({...filters, isWinning});\n                }}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All trades\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All trades</SelectItem>\n                  <SelectItem value=\"winning\">Winning trades</SelectItem>\n                  <SelectItem value=\"losing\">Losing trades</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"flex items-end\">\n              <Button\n                variant=\"outline\"\n                onClick={resetFilters}\n                className=\"flex items-center gap-1\"\n              >\n                <X className=\"h-4 w-4\" />\n                Reset Filters\n              </Button>\n            </div>\n          </div>\n        )}\n        \n        <div className=\"rounded-md border\">\n            <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-[160px]\">Timestamp</TableHead>\n                    <TableHead>Symbol</TableHead>\n                    <TableHead className=\"hidden md:table-cell\">Type</TableHead>\n                    <TableHead className=\"hidden lg:table-cell\">Method</TableHead>\n                    <TableHead className=\"hidden lg:table-cell\">Asset</TableHead>\n                    <TableHead className=\"text-right\">Size</TableHead>\n                    <TableHead className=\"text-right hidden sm:table-cell\">Entry Price</TableHead>\n                    <TableHead className=\"text-right hidden sm:table-cell\">Exit Price</TableHead>\n                    <TableHead className=\"text-right w-[100px]\">P&L ($)</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredTrades.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={9} className=\"h-24 text-center text-muted-foreground\">\n                        No trades found for this period or strategy.\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredTrades.map((trade) => (\n                      <TableRow key={trade.id}>\n                        <TableCell className=\"font-medium tabular-nums\">{formatTimestamp(trade.timestamp)}</TableCell>\n                        <TableCell>{trade.symbol}</TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          <Badge variant={getTradeTypeBadge(trade.tradeType)}>{trade.tradeType}</Badge>\n                        </TableCell>\n                        <TableCell className=\"hidden lg:table-cell\">{trade.tradingMethod}</TableCell>\n                        <TableCell className=\"hidden lg:table-cell\">{trade.assetType}</TableCell>\n                        <TableCell className=\"text-right tabular-nums\">{formatNumberValue(trade.lotSize)}</TableCell>\n                        <TableCell className=\"text-right hidden sm:table-cell tabular-nums\">\n                          {formatNumberValue(trade.entryPrice, { style: 'currency', currency: 'USD' })}\n                        </TableCell>\n                        <TableCell className=\"text-right hidden sm:table-cell tabular-nums\">\n                          {formatNumberValue(trade.exitPrice, { style: 'currency', currency: 'USD' })}\n                        </TableCell>\n                        <TableCell className={cn(\"text-right tabular-nums font-medium\", getPnlClass(trade.pnl))}>\n                          {formatNumberValue(trade.pnl, { signDisplay: 'auto' })}\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n            </Table>\n        </div>\n        {/* Pagination Controls */}\n        {filteredTotal > 0 && (\n            <div className=\"flex items-center justify-between space-x-2 pt-2\">\n                <span className=\"text-sm text-muted-foreground\">\n                    Showing {startIndex} - {endIndex} of {filteredTotal} trades\n                </span>\n                <div className=\"space-x-2\">\n                    <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => onPageChange(page - 1)}\n                    disabled={page <= 1}\n                    >\n                    <ArrowLeft className=\"mr-1 h-4 w-4\" />\n                    Previous\n                    </Button>\n                    <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => onPageChange(page + 1)}\n                    disabled={page >= totalPages}\n                    >\n                    Next\n                    <ArrowRight className=\"ml-1 h-4 w-4\" />\n                    </Button>\n                </div>\n            </div>\n        )}\n    </div>\n  );\n}\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2974, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,OAAO,gKAAA,CAAA,OAAkB;AAE/B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,gKAAA,CAAA,OAAkB;QACjB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,8FACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG,gKAAA,CAAA,OAAkB,CAAC,WAAW;AAErD,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,gKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,uYACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,gKAAA,CAAA,UAAqB,CAAC,WAAW;AAE3D,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,gKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,mIACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,gKAAA,CAAA,UAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 3027, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/app/monitoring/_components/live-broker-trades-table.tsx"],"sourcesContent":["// src/app/monitoring/_components/live-broker-trades-table.tsx\n'use client';\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RefreshCw } from \"lucide-react\";\nimport type { Trade } from '@/services/monitoring-service';\nimport { closeTrade } from '@/services/monitoring-service';\nimport { cn } from '@/lib/utils';\nimport { format } from 'date-fns'; // For formatting timestamps\nimport { useState } from 'react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { LayoutGrid, LayoutList } from \"lucide-react\";\n\n// Extended Trade interface with broker and leverage information\ninterface ExtendedTrade extends Trade {\n  brokerName?: string;\n  pipsPnL?: number;\n  leverage?: number;\n  isWinning?: boolean;\n}\n\ninterface LiveBrokerTradesTableProps {\n  trades: ExtendedTrade[];\n  isLoading: boolean;\n  onRefresh: () => void;\n  onTradeClose?: (tradeId: string) => void;\n}\n\n// Helper to format currency/numbers, can be moved to utils\nconst formatNumberValue = (value: number | undefined | null, options?: Intl.NumberFormatOptions): string => {\n    if (value === undefined || value === null) return '-';\n    return value.toLocaleString('en-US', options);\n};\n\nconst formatTimestamp = (timestamp: string): string => {\n    try {\n        return format(new Date(timestamp), 'yyyy-MM-dd HH:mm:ss');\n    } catch (error) {\n        return 'Invalid Date';\n    }\n};\n\nexport function LiveBrokerTradesTable({ trades, isLoading, onRefresh, onTradeClose }: LiveBrokerTradesTableProps) {\n  const getTradeTypeBadge = (type: Trade['tradeType']) => {\n     return type === 'BUY' ? 'default' : 'destructive';\n  };\n\n  const getPnlClass = (isWinning?: boolean) => {\n    if (isWinning === undefined) return '';\n    return isWinning ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400';\n  };\n\n  const [viewMode, setViewMode] = useState<'cards' | 'table'>('cards');\n  const [closingTradeId, setClosingTradeId] = useState<string | null>(null);\n\n  const handleCloseTrade = async (tradeId: string) => {\n    setClosingTradeId(tradeId);\n    try {\n      await closeTrade(tradeId);\n      if (onTradeClose) {\n        onTradeClose(tradeId);\n      } else {\n        // If no callback provided, just refresh\n        onRefresh();\n      }\n      toast({\n        title: \"Trade closed\",\n        description: \"The trade has been successfully closed\",\n      });\n    } catch (error) {\n      console.error(\"Failed to close trade:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to close the trade. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setClosingTradeId(null);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-medium\">Live Broker Trades</h3>\n            <div className=\"flex items-center gap-2\">\n                <Tabs\n                    value={viewMode}\n                    onValueChange={(value) => setViewMode(value as 'cards' | 'table')}\n                    className=\"mr-2\"\n                >\n                    <TabsList className=\"grid w-[160px] grid-cols-2\">\n                        <TabsTrigger value=\"cards\" className=\"flex items-center gap-1\">\n                            <LayoutGrid className=\"h-4 w-4\" />\n                            <span className=\"hidden sm:inline\">Cards</span>\n                        </TabsTrigger>\n                        <TabsTrigger value=\"table\" className=\"flex items-center gap-1\">\n                            <LayoutList className=\"h-4 w-4\" />\n                            <span className=\"hidden sm:inline\">Table</span>\n                        </TabsTrigger>\n                    </TabsList>\n                </Tabs>\n                <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={onRefresh}\n                    disabled={isLoading}\n                    className=\"flex items-center gap-1\"\n                >\n                    <RefreshCw className={cn(\"h-4 w-4\", isLoading && \"animate-spin\")} />\n                    Refresh\n                </Button>\n            </div>\n        </div>\n        \n        {trades.length === 0 ? (\n          <div className=\"rounded-md border p-8 text-center text-muted-foreground\">\n            {isLoading ? \"Loading trades...\" : \"No open trades found.\"}\n          </div>\n        ) : viewMode === 'cards' ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {trades.map((trade) => (\n              <div key={trade.id} className=\"rounded-md border p-4\">\n                <div className=\"flex justify-between items-center mb-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-lg font-bold\">{trade.symbol}</span>\n                    <Badge variant={getTradeTypeBadge(trade.tradeType)}>{trade.tradeType}</Badge>\n                  </div>\n                  <span className=\"text-sm text-muted-foreground\">{format(new Date(trade.timestamp), 'MM/dd HH:mm')}</span>\n                </div>\n                \n                <div className=\"flex justify-between items-center mb-3\">\n                  <div className={cn(\"text-xl font-bold\", getPnlClass(trade.isWinning))}>\n                    <div className=\"flex items-center gap-2\">\n                      {trade.pipsPnL !== undefined ? formatNumberValue(trade.pipsPnL, { signDisplay: 'auto' }) : '-'} pips\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"ml-2 h-7\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleCloseTrade(trade.id);\n                        }}\n                        disabled={closingTradeId === trade.id}\n                      >\n                        {closingTradeId === trade.id ? (\n                          <Loader2 className=\"h-3 w-3 animate-spin\" />\n                        ) : (\n                          \"Close\"\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <span className=\"font-medium\">{trade.brokerName || 'Default'}</span>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div>\n                    <div className=\"text-muted-foreground\">Size</div>\n                    <div className=\"font-medium\">{formatNumberValue(trade.lotSize)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground\">Leverage</div>\n                    <div className=\"font-medium\">{trade.leverage !== undefined ? `${trade.leverage}x` : '-'}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground\">Entry Price</div>\n                    <div className=\"font-medium\">{formatNumberValue(trade.entryPrice, { style: 'currency', currency: 'USD' })}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground\">Strategy</div>\n                    <div className=\"font-medium truncate\">{trade.strategyName || trade.strategyId}</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"rounded-md border overflow-x-auto\">\n            <Table className=\"min-w-max w-full\">\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-[100px]\">Timestamp</TableHead>\n                  <TableHead>Symbol</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Broker</TableHead>\n                  <TableHead className=\"text-right\">Size</TableHead>\n                  <TableHead className=\"text-right\">Entry Price</TableHead>\n                  <TableHead className=\"text-right\">P&L (pips)</TableHead>\n                  <TableHead className=\"text-right\">Leverage</TableHead>\n                  <TableHead>Strategy</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {trades.map((trade) => (\n                  <TableRow key={trade.id}>\n                    <TableCell className=\"font-medium tabular-nums text-sm\">{format(new Date(trade.timestamp), 'MM/dd HH:mm')}</TableCell>\n                    <TableCell>{trade.symbol}</TableCell>\n                    <TableCell>\n                      <Badge variant={getTradeTypeBadge(trade.tradeType)}>{trade.tradeType}</Badge>\n                    </TableCell>\n                    <TableCell>{trade.brokerName || 'Default'}</TableCell>\n                    <TableCell className=\"text-right tabular-nums\">{formatNumberValue(trade.lotSize)}</TableCell>\n                    <TableCell className=\"text-right tabular-nums\">\n                      {formatNumberValue(trade.entryPrice, { style: 'currency', currency: 'USD' })}\n                    </TableCell>\n                    <TableCell className={cn(\"text-right font-medium\", getPnlClass(trade.isWinning))}>\n                      <div className=\"flex items-center justify-end gap-2\">\n                        {trade.pipsPnL !== undefined ? formatNumberValue(trade.pipsPnL, { signDisplay: 'auto' }) : '-'}\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"ml-2 h-7\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleCloseTrade(trade.id);\n                          }}\n                          disabled={closingTradeId === trade.id}\n                        >\n                          {closingTradeId === trade.id ? (\n                            <Loader2 className=\"h-3 w-3 animate-spin\" />\n                          ) : (\n                            \"Close\"\n                          )}\n                        </Button>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-right font-medium\">\n                      {trade.leverage !== undefined ? `${trade.leverage}x` : '-'}\n                    </TableCell>\n                    <TableCell className=\"max-w-[150px] truncate\">\n                      {trade.strategyName || trade.strategyId}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3693, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/app/monitoring/page.tsx"],"sourcesContent":["// src/app/monitoring/page.tsx\n'use client';\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { PerformanceChart } from './_components/performance-chart';\nimport { ActivityLog } from './_components/activity-log';\nimport { AgentFeed } from './_components/agent-feed';\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, AlertTriangle, Eye, ArrowLeft } from \"lucide-react\";\nimport { Alert, AlertTitle, AlertDescription } from \"@/components/ui/alert\";\nimport {\n    getPortfolioHistory,\n    getActivityLogs,\n    getKeyMetrics,\n    getStrategyPerformance, // Import strategy-specific function\n    getStrategyTrades, // Add missing import\n    getLiveBrokerTrades, // Import live broker trades function\n    PerformanceDataPoint,\n    LogEntry,\n    KeyMetrics,\n} from '@/services/monitoring-service';\nimport { getStrategies, Strategy } from '@/services/strategies-service'; // To list strategies for selection\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { cn } from '@/lib/utils';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { StrategyTradesTable } from './_components/strategy-trades-table'; // New component for trades\nimport { LiveBrokerTradesTable } from './_components/live-broker-trades-table'; // Import live trades component\nimport type { Trade } from '@/services/monitoring-service'; // Import Trade type\n\n// Helper to format currency\nconst formatCurrency = (amount: number | undefined) => {\n    if (amount === undefined) return <Skeleton className=\"h-6 w-20 inline-block\" />;\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);\n}\n\n// Helper to format percentage\nconst formatPercentage = (value: number | undefined) => {\n    if (value === undefined) return <Skeleton className=\"h-6 w-16 inline-block\" />;\n    return `${value.toFixed(1)}%`;\n}\n\n// Helper to format numbers\nconst formatNumber = (value: number | undefined) => {\n     if (value === undefined) return <Skeleton className=\"h-6 w-10 inline-block\" />;\n     return value.toLocaleString();\n}\n\ntype ViewMode = 'portfolio' | 'strategy';\n\nexport default function MonitoringPage() {\n  // Overall Portfolio Data\n  const [portfolioChartData, setPortfolioChartData] = useState<PerformanceDataPoint[]>([]);\n  const [logData, setLogData] = useState<LogEntry[]>([]);\n  const [metrics, setMetrics] = useState<Partial<KeyMetrics>>({});\n\n  // Strategy Specific Data\n  const [strategies, setStrategies] = useState<Strategy[]>([]);\n  const [selectedStrategyId, setSelectedStrategyId] = useState<string | null>(null);\n  const [strategyChartData, setStrategyChartData] = useState<PerformanceDataPoint[]>([]);\n  const [strategyTrades, setStrategyTrades] = useState<Trade[]>([]);\n  const [strategyTotalTrades, setStrategyTotalTrades] = useState(0); // For pagination\n\n  // Live Broker Trades\n  const [liveBrokerTrades, setLiveBrokerTrades] = useState<Trade[]>([]);\n  const [isLoadingLiveTrades, setIsLoadingLiveTrades] = useState(false);\n\n  // UI State\n  const [viewMode, setViewMode] = useState<ViewMode>('portfolio');\n  const [isLoadingPortfolio, setIsLoadingPortfolio] = useState(true);\n  const [isLoadingLogs, setIsLoadingLogs] = useState(true);\n  const [isLoadingMetrics, setIsLoadingMetrics] = useState(true);\n  const [isLoadingStrategies, setIsLoadingStrategies] = useState(true);\n  const [isLoadingStrategyData, setIsLoadingStrategyData] = useState(false); // Separate loading for strategy view\n  const [error, setError] = useState<string | null>(null);\n\n  // Pagination state for trades table\n  const [tradePage, setTradePage] = useState(1);\n  const tradeRowsPerPage = 20; // Show 20 trades per page\n\n  // Fetch initial data (portfolio overview and strategy list)\n  const loadInitialData = async () => {\n        setIsLoadingPortfolio(true);\n        setIsLoadingLogs(true);\n        setIsLoadingMetrics(true);\n        setIsLoadingStrategies(true);\n        setIsLoadingLiveTrades(true);\n        setError(null);\n\n        try {\n            // Fetch data individually to handle errors for each request\n            try {\n                const fetchedChartData = await getPortfolioHistory('1M');\n                setPortfolioChartData(fetchedChartData);\n            } catch (chartErr) {\n                console.error(\"Failed to fetch portfolio history:\", chartErr);\n                setPortfolioChartData([]);\n            }\n            \n            try {\n                const fetchedLogData = await getActivityLogs(50);\n                setLogData(fetchedLogData);\n            } catch (logErr) {\n                console.error(\"Failed to fetch activity logs:\", logErr);\n                setLogData([]);\n            }\n            \n            try {\n                const fetchedMetrics = await getKeyMetrics();\n                setMetrics(fetchedMetrics);\n            } catch (metricsErr) {\n                console.error(\"Failed to fetch key metrics:\", metricsErr);\n                setMetrics({\n                    totalPnL: 0,\n                    todayPnL: 0,\n                    activeStrategies: 0,\n                    totalTradesToday: 0,\n                    winRateLast7d: 0,\n                    maxDrawdown: 0\n                });\n            }\n            \n            try {\n                const fetchedStrategies = await getStrategies(false);\n                setStrategies(fetchedStrategies);\n            } catch (strategiesErr) {\n                console.error(\"Failed to fetch strategies:\", strategiesErr);\n                setStrategies([]);\n            }\n            \n            try {\n                const fetchedLiveTrades = await getLiveBrokerTrades();\n                setLiveBrokerTrades(fetchedLiveTrades);\n            } catch (tradesErr) {\n                console.error(\"Failed to fetch live broker trades:\", tradesErr);\n                setLiveBrokerTrades([]);\n            }\n        } catch (err) {\n            console.error(\"Failed to fetch initial monitoring data:\", err);\n            setError(\"Failed to load initial monitoring data. Please check your connection and try again later.\");\n        } finally {\n            setIsLoadingPortfolio(false);\n            setIsLoadingLogs(false);\n            setIsLoadingMetrics(false);\n            setIsLoadingStrategies(false);\n            setIsLoadingLiveTrades(false);\n        }\n    };\n\n   useEffect(() => {\n     loadInitialData();\n     // Optional: Set up polling for some data?\n   }, []);\n\n    // Fetch data for the selected strategy when ID changes\n    useEffect(() => {\n        const loadStrategySpecificData = async () => {\n             if (!selectedStrategyId) {\n                setViewMode('portfolio'); // Go back to portfolio view if no strategy selected\n                 return;\n             };\n\n            setIsLoadingStrategyData(true);\n            setViewMode('strategy'); // Switch view\n            setError(null); // Clear previous errors\n\n            try {\n                // Fetch performance and trades for the selected strategy (reset page to 1)\n                setTradePage(1); // Reset page when strategy changes\n                const offset = 0; // Start from the first page\n                \n                try {\n                    const perfData = await getStrategyPerformance(selectedStrategyId, '1M');\n                    setStrategyChartData(perfData);\n                } catch (perfErr) {\n                    console.error(`Failed to fetch performance for strategy ${selectedStrategyId}:`, perfErr);\n                    setStrategyChartData([]);\n                }\n                \n                try {\n                    const tradesData = await getStrategyTrades(selectedStrategyId, tradeRowsPerPage, offset);\n                    setStrategyTrades(tradesData.trades);\n                    setStrategyTotalTrades(tradesData.total);\n                } catch (tradesErr) {\n                    console.error(`Failed to fetch trades for strategy ${selectedStrategyId}:`, tradesErr);\n                    setStrategyTrades([]);\n                    setStrategyTotalTrades(0);\n                }\n            } catch (err) {\n                console.error(`Failed to fetch data for strategy ${selectedStrategyId}:`, err);\n                setError(`Failed to load data for the selected strategy. ${err instanceof Error ? err.message : ''}`);\n                // Optionally switch back to portfolio view on error?\n                // setViewMode('portfolio');\n                // setSelectedStrategyId(null);\n            } finally {\n                setIsLoadingStrategyData(false);\n            }\n        };\n\n        loadStrategySpecificData();\n    }, [selectedStrategyId]); // Run when selectedStrategyId changes\n\n\n    // Fetch trades for the current strategy when page changes\n    useEffect(() => {\n         const loadTradesForPage = async () => {\n             if (viewMode !== 'strategy' || !selectedStrategyId) return;\n\n             setIsLoadingStrategyData(true); // Use same loading indicator for simplicity\n             setError(null);\n\n             const offset = (tradePage - 1) * tradeRowsPerPage;\n\n             try {\n                 const tradesData = await getStrategyTrades(selectedStrategyId, tradeRowsPerPage, offset);\n                 setStrategyTrades(tradesData.trades);\n                 setStrategyTotalTrades(tradesData.total); // Ensure total is updated if needed\n             } catch (err) {\n                 console.error(`Failed to fetch trades for page ${tradePage} of strategy ${selectedStrategyId}:`, err);\n                 setError(`Failed to load trades for the selected page. ${err instanceof Error ? err.message : ''}`);\n                 setStrategyTrades([]);\n             } finally {\n                 setIsLoadingStrategyData(false);\n             }\n         };\n\n         // Only run if we are in strategy view and not on initial strategy load (which is handled by the other useEffect)\n         if (tradePage > 1 || (tradePage === 1 && strategyTrades.length === 0 && strategyTotalTrades > 0)) {\n             loadTradesForPage();\n         }\n      }, [tradePage, selectedStrategyId, viewMode, strategyTrades.length, strategyTotalTrades]); // Re-run when page changes\n      \n  // Function to refresh live broker trades\n  const refreshLiveBrokerTrades = async () => {\n      setIsLoadingLiveTrades(true);\n      try {\n          const fetchedLiveTrades = await getLiveBrokerTrades();\n          setLiveBrokerTrades(fetchedLiveTrades);\n      } catch (err) {\n          console.error(\"Failed to refresh live broker trades:\", err);\n          setLiveBrokerTrades([]);\n      } finally {\n          setIsLoadingLiveTrades(false);\n      }\n  };\n  \n  // Function to handle trade closure\n  const handleTradeClose = (tradeId: string) => {\n      // Remove the trade from the list\n      setLiveBrokerTrades(prevTrades =>\n          prevTrades.filter(trade => trade.id !== tradeId)\n      );\n  };\n\n\n  const selectedStrategy = useMemo(() => {\n     return strategies.find(s => s.id === selectedStrategyId);\n  }, [selectedStrategyId, strategies]);\n\n  const isLoadingAny = isLoadingPortfolio || isLoadingLogs || isLoadingMetrics || isLoadingStrategies;\n\n  if (isLoadingAny && viewMode === 'portfolio') {\n       // Show a basic loading state for initial load\n       return (\n           <div className=\"flex justify-center items-center min-h-[400px]\">\n               <Loader2 className=\"h-10 w-10 animate-spin text-muted-foreground\" />\n               <span className=\"ml-3 text-muted-foreground\">Loading monitoring dashboard...</span>\n           </div>\n       );\n  }\n\n    // --- Render Portfolio View ---\n    const renderPortfolioView = () => (\n        <div className=\"grid gap-6 animate-fade-in\">\n            <div className=\"grid grid-cols-12 gap-6\">\n                {/* Main Content Area (9 columns) */}\n                <div className=\"col-span-12 lg:col-span-9 space-y-6\">\n                    {/* Strategy Selection Dropdown */}\n                    <Card>\n                        <CardHeader className=\"flex-row items-center justify-between pb-2\">\n                            <div>\n                                <CardTitle>Select Strategy</CardTitle>\n                                <CardDescription>View detailed performance and trades for a specific strategy.</CardDescription>\n                            </div>\n                            <Select onValueChange={setSelectedStrategyId} value={selectedStrategyId || \"\"} disabled={isLoadingStrategies}>\n                                <SelectTrigger className=\"w-[250px]\">\n                                    <SelectValue placeholder=\"Select a strategy...\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                    {isLoadingStrategies && <SelectItem value=\"loading\" disabled>Loading...</SelectItem>}\n                                    {!isLoadingStrategies && strategies.length === 0 && <SelectItem value=\"no-strats\" disabled>No strategies available</SelectItem>}\n                                    {!isLoadingStrategies && strategies.map(s => (\n                                        <SelectItem key={s.id} value={s.id}>\n                                            {s.name} ({s.status})\n                                        </SelectItem>\n                                    ))}\n                                </SelectContent>\n                            </Select>\n                        </CardHeader>\n                    </Card>\n\n                    {/* Portfolio Performance Chart */}\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Overall Portfolio Performance</CardTitle>\n                            <CardDescription>Portfolio value and cumulative profit/loss over time.</CardDescription>\n                        </CardHeader>\n                        <CardContent className=\"pl-2\">\n                            {isLoadingPortfolio ? (\n                                <div className=\"h-[300px] flex items-center justify-center\">\n                                    <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n                                </div>\n                            ) : (\n                                <PerformanceChart data={portfolioChartData} />\n                            )}\n                        </CardContent>\n                    </Card>\n\n                    {/* Live Broker Trades Table */}\n                    <Card>\n                        <CardContent className=\"pt-6\">\n                            {/* Import and use the LiveBrokerTradesTable component */}\n                            {/* @ts-ignore - Component will be available */}\n                            <LiveBrokerTradesTable\n                                trades={liveBrokerTrades.slice(0, 10)} // Limit to 10 trades\n                                isLoading={isLoadingLiveTrades}\n                                onRefresh={refreshLiveBrokerTrades}\n                                onTradeClose={handleTradeClose}\n                            />\n                        </CardContent>\n                    </Card>\n                </div>\n\n                {/* Sidebar (3 columns) */}\n                <div className=\"col-span-12 lg:col-span-3 space-y-6\">\n                    {/* Activity Log - Now in sidebar */}\n                    <Card>\n                        <CardHeader className=\"pb-2\">\n                            <CardTitle className=\"text-base\">Recent Activity Log</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"max-h-[300px] overflow-auto\">\n                            {isLoadingLogs ? (\n                                <div className=\"h-[200px] flex items-center justify-center\">\n                                    <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground\" />\n                                </div>\n                            ) : (\n                                <ActivityLog logs={logData} compact={true} />\n                            )}\n                        </CardContent>\n                    </Card>\n\n                    {/* Agent Feed - New component */}\n                    <AgentFeed />\n\n                    {/* Key Metrics - Now in sidebar */}\n                    <Card>\n                        <CardHeader className=\"pb-2\">\n                            <CardTitle className=\"text-base\">Key Metrics</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-3\">\n                            {/* Use isLoadingMetrics to show skeletons */}\n                            <div className=\"flex justify-between items-center\">\n                                <span className=\"text-sm text-muted-foreground\">Total P&L:</span>\n                                <span className={cn(\n                                    \"font-semibold text-sm\",\n                                    metrics.totalPnL === undefined ? \"\" : metrics.totalPnL >= 0 ? \"text-green-600 dark:text-green-400\" : \"text-red-600 dark:text-red-400\"\n                                )}>\n                                    {isLoadingMetrics ? <Skeleton className=\"h-4 w-16 inline-block\" /> : formatCurrency(metrics.totalPnL)}\n                                </span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                                <span className=\"text-sm text-muted-foreground\">Today's P&L:</span>\n                                <span className={cn(\n                                    \"font-semibold text-sm\",\n                                    metrics.todayPnL === undefined ? \"\" : metrics.todayPnL >= 0 ? \"text-green-600 dark:text-green-400\" : \"text-red-600 dark:text-red-400\"\n                                )}>\n                                    {isLoadingMetrics ? <Skeleton className=\"h-4 w-14 inline-block\" /> : formatCurrency(metrics.todayPnL)}\n                                </span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                                <span className=\"text-sm text-muted-foreground\">Active Strategies:</span>\n                                <span className=\"font-semibold text-sm\">{isLoadingMetrics ? <Skeleton className=\"h-4 w-8 inline-block\" /> : formatNumber(metrics.activeStrategies)}</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                                <span className=\"text-sm text-muted-foreground\">Trades Today:</span>\n                                <span className=\"font-semibold text-sm\">{isLoadingMetrics ? <Skeleton className=\"h-4 w-8 inline-block\" /> : formatNumber(metrics.totalTradesToday)}</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                                <span className=\"text-sm text-muted-foreground\">Win Rate (7d):</span>\n                                <span className=\"font-semibold text-sm\">{isLoadingMetrics ? <Skeleton className=\"h-4 w-12 inline-block\" /> : formatPercentage(metrics.winRateLast7d)}</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                                <span className=\"text-sm text-muted-foreground\">Max Drawdown:</span>\n                                <span className=\"font-semibold text-sm\">{isLoadingMetrics ? <Skeleton className=\"h-4 w-12 inline-block\" /> : formatPercentage(metrics.maxDrawdown)}</span>\n                            </div>\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n        </div>\n    );\n\n    // --- Render Strategy View ---\n    const renderStrategyView = () => {\n         if (!selectedStrategy) {\n             // Should ideally not happen if selection drives the view, but handle defensively\n             return (\n                 <div className=\"flex flex-col items-center justify-center min-h-[400px]\">\n                     <AlertTriangle className=\"h-10 w-10 mb-4 text-destructive\" />\n                     <p className=\"text-lg mb-4\">Selected strategy not found.</p>\n                     <Button onClick={() => setSelectedStrategyId(null)} variant=\"outline\">Back to Portfolio View</Button>\n                 </div>\n             );\n         }\n\n         return (\n             <div className=\"space-y-6 animate-fade-in\">\n                  {/* Header and Back Button */}\n                 <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                        <Button variant=\"outline\" size=\"icon\" onClick={() => setSelectedStrategyId(null)} title=\"Back to Portfolio View\">\n                             <ArrowLeft className=\"h-4 w-4\" />\n                         </Button>\n                         <div>\n                             <h2 className=\"text-2xl font-semibold\">{selectedStrategy.name} - Performance</h2>\n                             <p className=\"text-sm text-muted-foreground\">{selectedStrategy.description}</p>\n                         </div>\n                    </div>\n                    {/* Add any strategy-specific actions here if needed */}\n                 </div>\n\n                  {/* Error Display */}\n                 {error && !isLoadingStrategyData && (\n                     <Alert variant=\"destructive\">\n                         <AlertTriangle className=\"h-4 w-4\" />\n                         <AlertTitle>Error Loading Strategy Data</AlertTitle>\n                         <AlertDescription>{error}</AlertDescription>\n                     </Alert>\n                 )}\n\n                  {/* Strategy Performance Chart */}\n                 <Card>\n                    <CardHeader>\n                        <CardTitle>Strategy Performance</CardTitle>\n                        <CardDescription>Strategy-specific value and profit/loss over time.</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"pl-2\">\n                       {isLoadingStrategyData && !strategyChartData.length ? ( // Show loader only if no data yet\n                           <div className=\"h-[300px] flex items-center justify-center\">\n                             <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n                           </div>\n                       ) : (\n                          <PerformanceChart data={strategyChartData} />\n                       )}\n                    </CardContent>\n                 </Card>\n\n                  {/* Strategy Trades Table */}\n                 <Card>\n                     <CardHeader>\n                         <CardTitle>Recent Trades</CardTitle>\n                         <CardDescription>Trades executed by the \"{selectedStrategy.name}\" strategy.</CardDescription>\n                     </CardHeader>\n                     <CardContent>\n                          {isLoadingStrategyData && !strategyTrades.length ? ( // Show loader only if no data yet\n                            <div className=\"h-[300px] flex items-center justify-center\">\n                                <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n                            </div>\n                          ) : (\n                             <StrategyTradesTable\n                                 trades={strategyTrades}\n                                 totalTrades={strategyTotalTrades}\n                                 page={tradePage}\n                                 rowsPerPage={tradeRowsPerPage}\n                                 onPageChange={setTradePage}\n                             />\n                          )}\n                     </CardContent>\n                 </Card>\n             </div>\n         );\n    };\n\n\n    // --- Main Render Logic ---\n    return (\n        <div>\n            {viewMode === 'portfolio' ? renderPortfolioView() : renderStrategyView()}\n\n            {/* Add animation utility */}\n            <style jsx global>{`\n            @keyframes fadeIn {\n                from { opacity: 0; transform: translateY(-10px); }\n                to { opacity: 1; transform: translateY(0); }\n            }\n            .animate-fade-in {\n                animation: fadeIn 0.5s ease-out forwards;\n            }\n            `}</style>\n        </div>\n    );\n}\n\n    "],"names":[],"mappings":"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","debugId":null}}]
}