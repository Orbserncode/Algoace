{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  promptDir: './prompts',\n  plugins: [\n    googleAI({\n      apiKey: process.env.GOOGLE_GENAI_API_KEY,\n    }),\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC1C;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/ai/flows/suggest-strategy-config.ts"],"sourcesContent":["// This is an autogenerated file from Firebase Studio.\n\n'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for suggesting optimal configuration options for a trading strategy.\n *\n * The flow takes into account market conditions, risk tolerance, and historical performance data to provide potentially profitable strategies.\n *\n * @module ai/flows/suggest-strategy-config\n *\n * @interface SuggestStrategyConfigInput - The input type for the suggestStrategyConfig function.\n * @interface SuggestStrategyConfigOutput - The output type for the suggestStrategyConfig function.\n * @function suggestStrategyConfig - A function that triggers the suggestStrategyConfigFlow and returns the suggested configurations.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst SuggestStrategyConfigInputSchema = z.object({\n  marketConditions: z\n    .string()\n    .describe('The current market conditions (e.g., bullish, bearish, volatile).'),\n  riskTolerance:\n    z.enum(['low', 'medium', 'high']).describe('The user’s risk tolerance level.'),\n  historicalPerformanceData: z\n    .string()\n    .describe(\n      'Historical performance data of different trading strategies as a JSON string.'\n    ),\n});\n\nexport type SuggestStrategyConfigInput = z.infer<typeof SuggestStrategyConfigInputSchema>;\n\nconst SuggestStrategyConfigOutputSchema = z.object({\n  strategyName: z.string().describe('The name of the suggested trading strategy.'),\n  configurationOptions: z\n    .record(z.any())\n    .describe('A JSON object containing the optimal configuration options for the strategy.'),\n  expectedReturn: z\n    .number()\n    .describe('The expected return of the suggested strategy, expressed as a percentage.'),\n  riskLevel: z.string().describe('The risk level associated with the suggested strategy.'),\n});\n\nexport type SuggestStrategyConfigOutput = z.infer<typeof SuggestStrategyConfigOutputSchema>;\n\nexport async function suggestStrategyConfig(\n  input: SuggestStrategyConfigInput\n): Promise<SuggestStrategyConfigOutput> {\n  return suggestStrategyConfigFlow(input);\n}\n\nconst suggestStrategyConfigPrompt = ai.definePrompt({\n  name: 'suggestStrategyConfigPrompt',\n  input: {\n    schema: z.object({\n      marketConditions: z\n        .string()\n        .describe('The current market conditions (e.g., bullish, bearish, volatile).'),\n      riskTolerance:\n        z.enum(['low', 'medium', 'high']).describe('The user’s risk tolerance level.'),\n      historicalPerformanceData: z\n        .string()\n        .describe(\n          'Historical performance data of different trading strategies as a JSON string.'\n        ),\n    }),\n  },\n  output: {\n    schema: z.object({\n      strategyName: z.string().describe('The name of the suggested trading strategy.'),\n      configurationOptions: z\n        .record(z.any())\n        .describe('A JSON object containing the optimal configuration options for the strategy.'),\n      expectedReturn: z\n        .number()\n        .describe('The expected return of the suggested strategy, expressed as a percentage.'),\n      riskLevel: z.string().describe('The risk level associated with the suggested strategy.'),\n    }),\n  },\n  prompt: `You are an expert in financial trading strategies.\n\n  Based on the current market conditions: {{{marketConditions}}}, the user's risk tolerance: {{{riskTolerance}}}, and the following historical performance data: {{{historicalPerformanceData}}}, suggest an optimal trading strategy with specific configuration options.\n\n  Return the strategy name, configuration options (as a JSON object), expected return (as a percentage), and risk level. The configuration options should be optimized to maximize return while considering the risk tolerance specified by the user.\n\n  Make sure the configurationOptions are a valid JSON object.`,\n});\n\nconst suggestStrategyConfigFlow = ai.defineFlow<\n  typeof SuggestStrategyConfigInputSchema,\n  typeof SuggestStrategyConfigOutputSchema\n>(\n  {\n    name: 'suggestStrategyConfigFlow',\n    inputSchema: SuggestStrategyConfigInputSchema,\n    outputSchema: SuggestStrategyConfigOutputSchema,\n  },\n  async input => {\n    const {output} = await suggestStrategyConfigPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,sDAAsD;;;;;;AAItD;;;;;;;;;;CAUC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,kBAAkB,uIAAA,CAAA,IAAC,CAChB,MAAM,GACN,QAAQ,CAAC;IACZ,eACE,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAO;QAAU;KAAO,EAAE,QAAQ,CAAC;IAC7C,2BAA2B,uIAAA,CAAA,IAAC,CACzB,MAAM,GACN,QAAQ,CACP;AAEN;AAIA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,sBAAsB,uIAAA,CAAA,IAAC,CACpB,MAAM,CAAC,uIAAA,CAAA,IAAC,CAAC,GAAG,IACZ,QAAQ,CAAC;IACZ,gBAAgB,uIAAA,CAAA,IAAC,CACd,MAAM,GACN,QAAQ,CAAC;IACZ,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAIO,eAAe,uCAAmB,GAAnB,sBACpB,KAAiC;IAEjC,OAAO,0BAA0B;AACnC;AAEA,MAAM,8BAA8B,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAClD,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,kBAAkB,uIAAA,CAAA,IAAC,CAChB,MAAM,GACN,QAAQ,CAAC;YACZ,eACE,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;gBAAC;gBAAO;gBAAU;aAAO,EAAE,QAAQ,CAAC;YAC7C,2BAA2B,uIAAA,CAAA,IAAC,CACzB,MAAM,GACN,QAAQ,CACP;QAEN;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAClC,sBAAsB,uIAAA,CAAA,IAAC,CACpB,MAAM,CAAC,uIAAA,CAAA,IAAC,CAAC,GAAG,IACZ,QAAQ,CAAC;YACZ,gBAAgB,uIAAA,CAAA,IAAC,CACd,MAAM,GACN,QAAQ,CAAC;YACZ,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACjC;IACF;IACA,QAAQ,CAAC;;;;;;6DAMkD,CAAC;AAC9D;AAEA,MAAM,4BAA4B,2HAAA,CAAA,KAAE,CAAC,UAAU,CAI7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,4BAA4B;IACnD,OAAO;AACT;;;IAvDoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 386, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/app/monitoring/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/monitoring/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/monitoring/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+R,GAC5T,6DACA","debugId":null}},
    {"offset": {"line": 400, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/app/monitoring/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/monitoring/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/monitoring/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2Q,GACxS,yCACA","debugId":null}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}