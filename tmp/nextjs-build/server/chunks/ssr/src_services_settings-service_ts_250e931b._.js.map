{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Algoace/src/services/settings-service.ts"],"sourcesContent":["// src/services/settings-service.ts\n\n/**\n * @fileOverview Service functions for managing application settings.\n * Replace mock implementations with actual backend interactions.\n */\n\nimport { z } from 'zod'; // For potential schema validation if needed\n\n// Define types used in the settings forms\n// Should align with the Zod schemas in the components\n\n// LLM Provider type (align with credentials form schema)\nexport interface LLMProviderConfig {\n  id?: string;\n  providerType: \"google\" | \"openai\" | \"anthropic\" | \"groq\" | \"local\";\n  apiKey?: string;\n  apiUrl?: string; // For local provider\n  modelName?: string; // For local provider, specific model\n}\n\n// Broker Config type (align with credentials form schema - using a generic version for mock)\nexport interface BrokerConfig {\n    brokerType: \"alpaca\" | \"interactive_brokers\" | \"coinbase\" | \"kraken\" | \"binance\" | \"mock\";\n    id?: string; // Add an ID for broker configs\n    apiKey?: string;\n    apiSecret?: string;\n    accountNumber?: string;\n    host?: string;\n    port?: string | number;\n    paperTrading?: boolean;\n    clientId?: number;\n    // [key: string]: any; // Allow other properties like apiKey, apiSecret, paperTrading etc.\n}\n\n// Trading Settings type (align with trading settings form schema)\nexport interface TradingSettings {\n    defaultRiskPerTrade?: number;\n    defaultRiskManagement?: \"user_defined\" | \"ai_managed\";\n    maxPortfolioDrawdown?: number;\n    maxPortfolioDrawdownManagement?: \"user_defined\" | \"ai_managed\";\n    defaultLeverage?: number;\n    leverageManagement?: \"user_defined\" | \"ai_managed\";\n    defaultTrailingStopPercent?: number;\n    trailingStopManagement?: \"user_defined\" | \"ai_managed\";\n    allowedTradeTypes?: (\"buy\" | \"sell\")[];\n    allowedTradingMethods?: (\"spot\" | \"futures\" | \"options\")[];\n    allowedAssetTypes?: (\"stock\" | \"crypto\" | \"forex\" | \"etf\")[];\n    allowedCategories?: string;\n    preferredMarkets?: string;\n}\n\n// Saved Configuration type (for AI suggestions and history)\nexport interface SavedConfig {\n    id: string;\n    name: string;\n    description?: string;\n    createdAt: string; // ISO date string\n    configData: Record<string, any>; // The actual configuration parameters (YAML/JSON parsed)\n    source: 'AI-Generated' | 'User-Saved';\n    status: 'Active' | 'Archived';\n    strategyName?: string; // Optional: Name of strategy used with this config\n    performanceSummary?: string; // Optional: Brief summary of performance\n}\n\n\n// --- Mock Data (Replace with actual backend storage/retrieval) ---\n\nlet mockCredentials = {\n    llmProviders: [\n        { id: 'llm-google-default', providerType: 'google', apiKey: 'GOOGLE_API_KEY_PLACEHOLDER', modelName: 'gemini-2.0-flash' },\n        { id: 'llm-openai-default', providerType: 'openai', apiKey: 'OPENAI_API_KEY_PLACEHOLDER', modelName: 'gpt-4-turbo' },\n        { id: 'llm-local-ollama', providerType: 'local', apiUrl: 'http://localhost:11434/v1', modelName: 'llama3:latest' },\n    ] as LLMProviderConfig[],\n    brokerConfigs: [ // Now an array\n        {\n            id: 'broker-alpaca-paper',\n            brokerType: 'alpaca',\n            apiKey: 'ALPACA_PAPER_KEY',\n            apiSecret: 'ALPACA_PAPER_SECRET',\n            paperTrading: true\n        },\n        {\n            id: 'broker-ibkr-live',\n            brokerType: 'interactive_brokers',\n            accountNumber: 'U1234567',\n            host: '127.0.0.1',\n            port: 7496, // Live TWS port\n        }\n    ] as BrokerConfig[],\n    serpApiKey: 'SERPAPI_KEY_PLACEHOLDER' as string | undefined,\n};\n\nlet mockTradingSettings: TradingSettings = {\n    defaultRiskPerTrade: 1,\n    defaultRiskManagement: \"user_defined\",\n    maxPortfolioDrawdown: 20,\n    maxPortfolioDrawdownManagement: \"user_defined\",\n    preferredMarkets: \"NYSE, NASDAQ\",\n    defaultLeverage: 1,\n    leverageManagement: \"user_defined\",\n    allowedTradeTypes: [\"buy\", \"sell\"],\n    allowedTradingMethods: [\"spot\"],\n    allowedAssetTypes: [\"stock\", \"etf\"],\n    allowedCategories: \"Tech, Healthcare\",\n};\n\nlet mockSavedConfigs: SavedConfig[] = [\n     { id: 'cfg-ai-1', name: 'AI Aggressive Growth (July)', createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), source: 'AI-Generated', status: 'Active', configData: { defaultRiskPerTrade: 2.5, defaultLeverage: 10, defaultTrailingStopPercent: 1.5 }, strategyName: 'Momentum Burst', performanceSummary: '+5.2% last run' },\n     { id: 'cfg-ai-2', name: 'AI Low Volatility (July)', createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), source: 'AI-Generated', status: 'Active', configData: { defaultRiskPerTrade: 0.8, maxPortfolioDrawdown: 8 }, strategyName: 'Mean Reversion Scalper', performanceSummary: '+1.1% last run' },\n     { id: 'cfg-user-1', name: 'My Conservative Setup', createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(), source: 'User-Saved', status: 'Active', configData: { defaultRiskPerTrade: 0.5, maxPortfolioDrawdown: 10, allowedAssetTypes: ['stock', 'etf'] } },\n     { id: 'cfg-old-1', name: 'Old Crypto Config', createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), source: 'User-Saved', status: 'Archived', configData: { defaultRiskPerTrade: 3, defaultLeverage: 20, allowedAssetTypes: ['crypto'] } },\n];\n\n\n// --- Helper Functions ---\n\n// Simulate potential API/DB errors\nconst simulateError = (probability = 0.1): void => {\n    if (Math.random() < probability) {\n        console.warn(`Simulating a service error (probability: ${probability})`);\n        throw new Error(\"Simulated settings service error.\");\n    }\n}\n\nconst simulateDelay = (min = 200, max = 500): Promise<void> => {\n    return new Promise(resolve => setTimeout(resolve, min + Math.random() * (max - min)));\n}\n\n\n// --- Service Functions ---\n\n/**\n * Fetches the current credentials (LLM providers, Broker configs, SerpAPI key).\n * NOTE: In a real app, sensitive data like API keys should NOT be sent to the frontend.\n * This mock function returns redacted data for demonstration.\n */\nexport async function getCredentials(): Promise<{ llmProviders: LLMProviderConfig[], brokerConfigs: BrokerConfig[], serpApiKey?: string }> {\n    console.log(\"SERVICE: Fetching credentials (mock, redacted)\");\n    await simulateDelay();\n    return {\n        llmProviders: mockCredentials.llmProviders.map(p => ({ ...p, apiKey: p.apiKey ? '******' : undefined })),\n        brokerConfigs: mockCredentials.brokerConfigs.map(b => ({ ...b, apiKey: b.apiKey ? '******' : undefined, apiSecret: b.apiSecret ? '******' : undefined })),\n        serpApiKey: mockCredentials.serpApiKey ? '******' : undefined,\n    };\n}\n\n/**\n * Saves updated credentials to the backend.\n * The backend must handle secure storage.\n * @param credentials The credentials object.\n */\nexport async function saveCredentials(credentials: { llmProviders?: LLMProviderConfig[], brokerConfigs?: BrokerConfig[], serpApiKey?: string }): Promise<void> {\n    console.log(\"SERVICE: Saving credentials (mock)\");\n    await simulateDelay(500, 1000);\n    simulateError(0.1);\n\n    // Mock update: Merge new data\n    if (credentials.llmProviders) {\n        mockCredentials.llmProviders = credentials.llmProviders.map((p, index) => ({\n             id: p.id || `llm-${p.providerType}-${Date.now()}-${index}`,\n             ...p\n        }));\n    }\n    if (credentials.brokerConfigs) {\n        mockCredentials.brokerConfigs = credentials.brokerConfigs.map((b, index) => ({\n            id: b.id || `broker-${b.brokerType}-${Date.now()}-${index}`,\n            ...b\n        }));\n    }\n    if (credentials.serpApiKey !== undefined) {\n        mockCredentials.serpApiKey = credentials.serpApiKey;\n    }\n\n    console.log(\"SERVICE: Mock credentials updated.\", mockCredentials);\n}\n\n\n/**\n * Tests the connection for a given LLM provider configuration.\n * @param providerConfig The configuration of the LLM provider to test.\n * @returns A promise resolving to an object with a success message or throwing an error.\n */\nexport async function testLLMConnection(providerConfig: LLMProviderConfig): Promise<{ success: boolean; message?: string }> {\n    console.log(`SERVICE: Testing LLM connection for ${providerConfig.providerType} (mock)`);\n    await simulateDelay(400, 800);\n    const shouldFail = Math.random() < 0.15;\n    if (shouldFail) {\n        console.error(`SERVICE: Mock LLM connection test FAILED for ${providerConfig.providerType}`);\n        throw new Error(`Connection failed. Check API key or URL.`);\n    }\n    console.log(`SERVICE: Mock LLM connection test SUCCEEDED for ${providerConfig.providerType}`);\n    return { success: true, message: `Successfully listed models (mock).` };\n}\n\n/**\n * Tests the connection for a given Broker configuration.\n * @param brokerConfig The configuration of the broker to test.\n * @returns A promise resolving to an object with a success message or throwing an error.\n */\nexport async function testBrokerConnection(brokerConfig: BrokerConfig): Promise<{ success: boolean; message?: string }> {\n    console.log(`SERVICE: Testing Broker connection for ${brokerConfig.brokerType} (mock)`);\n    await simulateDelay(500, 1000);\n    const shouldFail = Math.random() < 0.2;\n    if (shouldFail) {\n        console.error(`SERVICE: Mock Broker connection test FAILED for ${brokerConfig.brokerType}`);\n        throw new Error(`Connection failed. Check credentials or broker status.`);\n    }\n    console.log(`SERVICE: Mock Broker connection test SUCCEEDED for ${brokerConfig.brokerType}`);\n    return { success: true, message: `Account details fetched successfully (mock).` };\n}\n\n\n/**\n * Fetches the current trading settings.\n */\nexport async function getTradingSettings(): Promise<TradingSettings> {\n    console.log(\"SERVICE: Fetching trading settings (mock)\");\n    await simulateDelay();\n    return { ...mockTradingSettings }; // Return a copy\n}\n\n/**\n * Saves updated trading settings to the backend.\n * @param settings The updated trading settings.\n */\nexport async function saveTradingSettings(settings: TradingSettings): Promise<void> {\n    console.log(\"SERVICE: Saving trading settings (mock)\");\n    await simulateDelay(300, 600);\n    simulateError(0.05);\n    mockTradingSettings = { ...settings };\n    console.log(\"SERVICE: Mock trading settings updated.\");\n}\n\n// --- AI Configuration Management ---\n\nexport async function getAIConfigSuggestions(): Promise<SavedConfig[]> {\n     console.log(\"SERVICE: Fetching AI config suggestions (mock)\");\n     await simulateDelay(300, 700);\n     return mockSavedConfigs.filter(c => c.source === 'AI-Generated' && c.status === 'Active');\n}\n\nexport async function getSavedConfigs(includeArchived = false): Promise<SavedConfig[]> {\n     console.log(`SERVICE: Fetching saved configs (includeArchived: ${includeArchived}) (mock)`);\n     await simulateDelay(400, 800);\n     const filtered = includeArchived\n         ? [...mockSavedConfigs]\n         : mockSavedConfigs.filter(c => c.status !== 'Archived');\n    return filtered;\n}\n\nexport async function archiveConfig(configId: string): Promise<SavedConfig | null> {\n    console.log(`SERVICE: Archiving config ${configId} (mock)`);\n    await simulateDelay();\n    simulateError(0.05);\n    const index = mockSavedConfigs.findIndex(c => c.id === configId);\n    if (index === -1) return null;\n    mockSavedConfigs[index].status = 'Archived';\n    console.log(`SERVICE: Config ${configId} archived.`);\n    return { ...mockSavedConfigs[index] };\n}\n\nexport async function deleteConfig(configId: string): Promise<boolean> {\n    console.log(`SERVICE: Deleting config ${configId} (mock)`);\n    await simulateDelay();\n    simulateError(0.1);\n    const initialLength = mockSavedConfigs.length;\n    mockSavedConfigs = mockSavedConfigs.filter(c => c.id !== configId);\n    const deleted = mockSavedConfigs.length < initialLength;\n     if (deleted) {\n        console.log(`SERVICE: Config ${configId} deleted.`);\n    } else {\n         console.warn(`SERVICE: Config ${configId} not found for deletion.`);\n    }\n    return deleted;\n}\n\nexport async function applyConfiguration(config: SavedConfig): Promise<void> {\n     console.log(`SERVICE: Applying configuration ${config.id} (${config.name}) (mock)`);\n     await simulateDelay(300, 500);\n     simulateError(0.05);\n     mockTradingSettings = {\n         ...mockTradingSettings,\n         ...config.configData,\n     };\n     console.log(`SERVICE: Configuration ${config.name} applied (mock).`);\n     const index = mockSavedConfigs.findIndex(c => c.id === config.id);\n     if (index !== -1 && mockSavedConfigs[index].source === 'AI-Generated') {\n         console.log(`SERVICE: Suggestion ${config.id} considered applied.`);\n     }\n}\n\n\n// --- LLM Provider Specific Functions ---\n\n/**\n * Fetches a list of available models for a given LLM provider type.\n * This is a MOCK function. A real implementation would make API calls to the respective LLM provider.\n * @param providerType The type of the LLM provider.\n * @param apiKey Optional API key if needed for the provider's API.\n * @returns A promise resolving to an array of model name strings.\n */\nexport async function getAvailableLlmModels(providerType: LLMProviderConfig['providerType'], apiKey?: string): Promise<string[]> {\n    console.log(`SERVICE: Fetching available models for ${providerType} (mock)`);\n    await simulateDelay();\n    // SimulateError if API key is missing for providers that need it (except local)\n    if (providerType !== 'local' && !apiKey) {\n        // throw new Error(`API key is required to fetch models for ${providerType}.`);\n        // For mock, return empty or default if no key, rather than throwing error here\n        return [];\n    }\n\n    switch (providerType) {\n        case 'google':\n            return ['gemini-2.0-flash', 'gemini-1.5-pro-latest', 'gemini-1.5-flash-latest', 'gemini-1.0-pro'];\n        case 'openai':\n            return ['gpt-4-turbo', 'gpt-4', 'gpt-3.5-turbo', 'dall-e-3'];\n        case 'anthropic':\n            return ['claude-3-opus-20240229', 'claude-3-sonnet-20240229', 'claude-3-haiku-20240307'];\n        case 'groq':\n            return ['llama3-8b-8192', 'llama3-70b-8192', 'mixtral-8x7b-32768', 'gemma-7b-it'];\n        case 'local':\n            // For local, models are usually self-managed. Could have a mechanism to list from Ollama, etc.\n            // Or user specifies model name directly.\n            return ['llama3:latest', 'mistral:latest', 'phi3:latest', 'custom-local-model']; // Example local models\n        default:\n            return [];\n    }\n}\n\n// --- Broker Specific Functions ---\n\n/**\n * Fetches the list of currently configured brokers.\n */\nexport async function getConfiguredBrokers(): Promise<BrokerConfig[]> {\n    console.log(\"SERVICE: Fetching configured brokers (mock)\");\n    await simulateDelay();\n    // Return copies to prevent direct mutation, redact sensitive fields\n    return mockCredentials.brokerConfigs.map(b => ({\n        ...b,\n        apiKey: b.apiKey ? '******' : undefined,\n        apiSecret: b.apiSecret ? '******' : undefined,\n    }));\n}"],"names":[],"mappings":"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","debugId":null}}]
}